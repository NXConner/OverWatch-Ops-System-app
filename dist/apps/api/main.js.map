{"version":3,"file":"main.js","mappings":"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","sources":["webpack://@blacktop/api/./apps/api/src/main.ts?4476","webpack://@blacktop/api/./apps/api/src/main.ts","webpack://@blacktop/api/external commonjs \"tslib\"","webpack://@blacktop/api/external commonjs \"express\"","webpack://@blacktop/api/external commonjs \"cors\"","webpack://@blacktop/api/external commonjs \"helmet\"","webpack://@blacktop/api/external commonjs \"compression\"","webpack://@blacktop/api/external commonjs \"express-rate-limit\"","webpack://@blacktop/api/external node-commonjs \"http\"","webpack://@blacktop/api/external commonjs \"socket.io\"","webpack://@blacktop/api/external commonjs \"dotenv\"","webpack://@blacktop/api/./apps/api/src/utils/logger.ts?e7cc","webpack://@blacktop/api/./apps/api/src/utils/logger.ts","webpack://@blacktop/api/external commonjs \"winston\"","webpack://@blacktop/api/external node-commonjs \"fs\"","webpack://@blacktop/api/./apps/api/src/middleware/error-handler.ts?e34e","webpack://@blacktop/api/./apps/api/src/middleware/error-handler.ts","webpack://@blacktop/api/external commonjs \"zod\"","webpack://@blacktop/api/./apps/api/src/middleware/auth.ts?14ce","webpack://@blacktop/api/./apps/api/src/middleware/auth.ts","webpack://@blacktop/api/external commonjs \"jsonwebtoken\"","webpack://@blacktop/api/./apps/api/src/services/plugin-manager.ts?889f","webpack://@blacktop/api/./apps/api/src/services/plugin-manager.ts","webpack://@blacktop/api/external node-commonjs \"crypto\"","webpack://@blacktop/api/external node-commonjs \"fs/promises\"","webpack://@blacktop/api/external node-commonjs \"path\"","webpack://@blacktop/api/external commonjs \"events\"","webpack://@blacktop/api/./apps/api/src/services/database.ts?4f3d","webpack://@blacktop/api/./apps/api/src/services/database.ts","webpack://@blacktop/api/external commonjs \"pg\"","webpack://@blacktop/api/./apps/api/src/database/schema.ts?e8f2","webpack://@blacktop/api/./apps/api/src/database/schema.ts","webpack://@blacktop/api/./apps/api/src/routes/auth.ts?535a","webpack://@blacktop/api/./apps/api/src/routes/auth.ts","webpack://@blacktop/api/external commonjs \"bcryptjs\"","webpack://@blacktop/api/./apps/api/src/routes/users.ts?a37c","webpack://@blacktop/api/./apps/api/src/routes/users.ts","webpack://@blacktop/api/./apps/api/src/routes/modules.ts?68f7","webpack://@blacktop/api/./apps/api/src/routes/modules.ts","webpack://@blacktop/api/./apps/api/src/routes/overwatch.ts?d3f5","webpack://@blacktop/api/./apps/api/src/routes/overwatch.ts","webpack://@blacktop/api/./apps/api/src/config/database.ts?6cac","webpack://@blacktop/api/./apps/api/src/config/database.ts","webpack://@blacktop/api/./apps/api/src/services/weatherService.ts?2a75","webpack://@blacktop/api/./apps/api/src/services/weatherService.ts","webpack://@blacktop/api/external commonjs \"axios\"","webpack://@blacktop/api/./apps/api/src/routes/plugins.ts?bdd2","webpack://@blacktop/api/./apps/api/src/routes/plugins.ts","webpack://@blacktop/api/./apps/api/src/routes/business-logic.ts?9304","webpack://@blacktop/api/./apps/api/src/routes/business-logic.ts","webpack://@blacktop/api/webpack/bootstrap","webpack://@blacktop/api/webpack/runtime/node module decorator","webpack://@blacktop/api/webpack/before-startup","webpack://@blacktop/api/webpack/startup","webpack://@blacktop/api/webpack/after-startup"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.io = exports.app = void 0;\nconst tslib_1 = require(\"tslib\");\nconst express_1 = tslib_1.__importDefault(require(\"express\"));\nconst cors_1 = tslib_1.__importDefault(require(\"cors\"));\nconst helmet_1 = tslib_1.__importDefault(require(\"helmet\"));\nconst compression_1 = tslib_1.__importDefault(require(\"compression\"));\nconst express_rate_limit_1 = tslib_1.__importDefault(require(\"express-rate-limit\"));\nconst http_1 = require(\"http\");\nconst socket_io_1 = require(\"socket.io\");\nconst dotenv_1 = tslib_1.__importDefault(require(\"dotenv\"));\nconst logger_1 = require(\"./utils/logger\");\nconst error_handler_1 = require(\"./middleware/error-handler\");\nconst auth_1 = require(\"./middleware/auth\");\nconst plugin_manager_1 = require(\"./services/plugin-manager\");\nconst database_1 = require(\"./services/database\");\n// Routes\nconst auth_2 = tslib_1.__importDefault(require(\"./routes/auth\"));\nconst users_1 = tslib_1.__importDefault(require(\"./routes/users\"));\nconst modules_1 = tslib_1.__importDefault(require(\"./routes/modules\"));\nconst overwatch_1 = tslib_1.__importDefault(require(\"./routes/overwatch\"));\nconst plugins_1 = tslib_1.__importDefault(require(\"./routes/plugins\"));\nconst business_logic_1 = tslib_1.__importDefault(require(\"./routes/business-logic\"));\ndotenv_1.default.config();\nconst app = (0, express_1.default)();\nexports.app = app;\nconst server = (0, http_1.createServer)(app);\nconst io = new socket_io_1.Server(server, {\n    cors: {\n        origin: process.env.FRONTEND_URL || \"http://localhost:3000\",\n        methods: [\"GET\", \"POST\"]\n    }\n});\nexports.io = io;\n// Security middleware\napp.use((0, helmet_1.default)({\n    contentSecurityPolicy: {\n        directives: {\n            defaultSrc: [\"'self'\"],\n            styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n            scriptSrc: [\"'self'\"],\n            imgSrc: [\"'self'\", \"data:\", \"https:\"],\n        },\n    },\n}));\napp.use((0, cors_1.default)({\n    origin: process.env.FRONTEND_URL || \"http://localhost:3000\",\n    credentials: true\n}));\n// Rate limiting\nconst limiter = (0, express_rate_limit_1.default)({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100, // limit each IP to 100 requests per windowMs\n    message: 'Too many requests from this IP, please try again later.'\n});\napp.use(limiter);\n// Body parsing middleware\napp.use((0, compression_1.default)());\napp.use(express_1.default.json({ limit: '10mb' }));\napp.use(express_1.default.urlencoded({ extended: true, limit: '10mb' }));\n// Logging middleware\napp.use((req, res, next) => {\n    logger_1.logger.info(`${req.method} ${req.path}`, {\n        ip: req.ip,\n        userAgent: req.get('User-Agent')\n    });\n    next();\n});\n// Health check endpoint\napp.get('/health', (req, res) => {\n    res.json({\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        version: process.env.npm_package_version || '1.0.0'\n    });\n});\n// API routes\napp.use('/api/auth', auth_2.default);\napp.use('/api/users', auth_1.authMiddleware, users_1.default);\napp.use('/api/modules', auth_1.authMiddleware, modules_1.default);\napp.use('/api/overwatch', auth_1.authMiddleware, overwatch_1.default);\napp.use('/api/plugins', auth_1.authMiddleware, plugins_1.default);\napp.use('/api/business-logic', auth_1.authMiddleware, business_logic_1.default);\n// Socket.IO connection handling\nio.on('connection', (socket) => {\n    logger_1.logger.info(`Client connected: ${socket.id}`);\n    socket.on('join-room', (room) => {\n        socket.join(room);\n        logger_1.logger.info(`Client ${socket.id} joined room: ${room}`);\n    });\n    socket.on('disconnect', () => {\n        logger_1.logger.info(`Client disconnected: ${socket.id}`);\n    });\n});\n// Error handling middleware\napp.use(error_handler_1.errorHandler);\n// 404 handler\napp.use('*', (req, res) => {\n    res.status(404).json({\n        error: 'Not Found',\n        message: `Route ${req.originalUrl} not found`\n    });\n});\nconst PORT = process.env.PORT || 3333;\nasync function bootstrap() {\n    try {\n        // Initialize database\n        await database_1.DatabaseService.initialize();\n        logger_1.logger.info('Database initialized successfully');\n        // Initialize plugin manager\n        await plugin_manager_1.pluginManager.initialize();\n        logger_1.logger.info('Plugin manager initialized successfully');\n        // Start server\n        server.listen(PORT, () => {\n            logger_1.logger.info(`🚀 Blacktop Blackout API server running on port ${PORT}`);\n            logger_1.logger.info(`📱 Environment: ${process.env.NODE_ENV || 'development'}`);\n        });\n    }\n    catch (error) {\n        logger_1.logger.error('Failed to start server:', error);\n        process.exit(1);\n    }\n}\n// Graceful shutdown\nprocess.on('SIGTERM', async () => {\n    logger_1.logger.info('SIGTERM received, shutting down gracefully');\n    await database_1.DatabaseService.close();\n    process.exit(0);\n});\nprocess.on('SIGINT', async () => {\n    logger_1.logger.info('SIGINT received, shutting down gracefully');\n    await database_1.DatabaseService.close();\n    process.exit(0);\n});\n// Start the server\nif (require.main === module) {\n    bootstrap();\n}\n","import express from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport compression from 'compression';\nimport rateLimit from 'express-rate-limit';\nimport { createServer } from 'http';\nimport { Server as SocketIOServer } from 'socket.io';\nimport dotenv from 'dotenv';\n\nimport { logger } from './utils/logger';\nimport { errorHandler } from './middleware/error-handler';\nimport { authMiddleware } from './middleware/auth';\nimport { pluginManager } from './services/plugin-manager';\nimport { DatabaseService } from './services/database';\n\n// Routes\nimport authRoutes from './routes/auth';\nimport userRoutes from './routes/users';\nimport moduleRoutes from './routes/modules';\nimport overwatchRoutes from './routes/overwatch';\nimport pluginRoutes from './routes/plugins';\nimport businessLogicRoutes from './routes/business-logic';\n\ndotenv.config();\n\nconst app = express();\nconst server = createServer(app);\nconst io = new SocketIOServer(server, {\n  cors: {\n    origin: process.env.FRONTEND_URL || \"http://localhost:3000\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n    },\n  },\n}));\n\napp.use(cors({\n  origin: process.env.FRONTEND_URL || \"http://localhost:3000\",\n  credentials: true\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Too many requests from this IP, please try again later.'\n});\napp.use(limiter);\n\n// Body parsing middleware\napp.use(compression());\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Logging middleware\napp.use((req, res, next) => {\n  logger.info(`${req.method} ${req.path}`, {\n    ip: req.ip,\n    userAgent: req.get('User-Agent')\n  });\n  next();\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    version: process.env.npm_package_version || '1.0.0'\n  });\n});\n\n// API routes\napp.use('/api/auth', authRoutes);\napp.use('/api/users', authMiddleware, userRoutes);\napp.use('/api/modules', authMiddleware, moduleRoutes);\napp.use('/api/overwatch', authMiddleware, overwatchRoutes);\napp.use('/api/plugins', authMiddleware, pluginRoutes);\napp.use('/api/business-logic', authMiddleware, businessLogicRoutes);\n\n// Socket.IO connection handling\nio.on('connection', (socket) => {\n  logger.info(`Client connected: ${socket.id}`);\n  \n  socket.on('join-room', (room: string) => {\n    socket.join(room);\n    logger.info(`Client ${socket.id} joined room: ${room}`);\n  });\n  \n  socket.on('disconnect', () => {\n    logger.info(`Client disconnected: ${socket.id}`);\n  });\n});\n\n// Error handling middleware\napp.use(errorHandler);\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({\n    error: 'Not Found',\n    message: `Route ${req.originalUrl} not found`\n  });\n});\n\nconst PORT = process.env.PORT || 3333;\n\nasync function bootstrap() {\n  try {\n    // Initialize database\n    await DatabaseService.initialize();\n    logger.info('Database initialized successfully');\n\n    // Initialize plugin manager\n    await pluginManager.initialize();\n    logger.info('Plugin manager initialized successfully');\n\n    // Start server\n    server.listen(PORT, () => {\n      logger.info(`🚀 Blacktop Blackout API server running on port ${PORT}`);\n      logger.info(`📱 Environment: ${process.env.NODE_ENV || 'development'}`);\n    });\n\n  } catch (error) {\n    logger.error('Failed to start server:', error);\n    process.exit(1);\n  }\n}\n\n// Graceful shutdown\nprocess.on('SIGTERM', async () => {\n  logger.info('SIGTERM received, shutting down gracefully');\n  await DatabaseService.close();\n  process.exit(0);\n});\n\nprocess.on('SIGINT', async () => {\n  logger.info('SIGINT received, shutting down gracefully');\n  await DatabaseService.close();\n  process.exit(0);\n});\n\n// Export for testing\nexport { app, io };\n\n// Start the server\nif (require.main === module) {\n  bootstrap();\n}","module.exports = require(\"tslib\");","module.exports = require(\"express\");","module.exports = require(\"cors\");","module.exports = require(\"helmet\");","module.exports = require(\"compression\");","module.exports = require(\"express-rate-limit\");","module.exports = require(\"http\");","module.exports = require(\"socket.io\");","module.exports = require(\"dotenv\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logStream = exports.logger = void 0;\nconst tslib_1 = require(\"tslib\");\nconst winston_1 = tslib_1.__importDefault(require(\"winston\"));\nconst { combine, timestamp, printf, colorize, errors } = winston_1.default.format;\n// Custom log format\nconst logFormat = printf(({ level, message, timestamp, stack, ...meta }) => {\n    let log = `${timestamp} [${level}]: ${message}`;\n    if (Object.keys(meta).length > 0) {\n        log += ` ${JSON.stringify(meta)}`;\n    }\n    if (stack) {\n        log += `\\n${stack}`;\n    }\n    return log;\n});\n// Create logger instance\nexports.logger = winston_1.default.createLogger({\n    level: process.env.LOG_LEVEL || 'info',\n    format: combine(timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), errors({ stack: true }), logFormat),\n    transports: [\n        // Console transport with colors for development\n        new winston_1.default.transports.Console({\n            format: combine(colorize(), timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), errors({ stack: true }), logFormat),\n        }),\n        // File transport for errors\n        new winston_1.default.transports.File({\n            filename: 'logs/error.log',\n            level: 'error',\n            maxsize: 5242880, // 5MB\n            maxFiles: 5,\n        }),\n        // File transport for all logs\n        new winston_1.default.transports.File({\n            filename: 'logs/combined.log',\n            maxsize: 5242880, // 5MB\n            maxFiles: 5,\n        }),\n    ],\n    // Handle uncaught exceptions\n    exceptionHandlers: [\n        new winston_1.default.transports.File({ filename: 'logs/exceptions.log' })\n    ],\n    // Handle unhandled promise rejections\n    rejectionHandlers: [\n        new winston_1.default.transports.File({ filename: 'logs/rejections.log' })\n    ]\n});\n// Create logs directory if it doesn't exist\nconst fs_1 = require(\"fs\");\nif (!(0, fs_1.existsSync)('logs')) {\n    (0, fs_1.mkdirSync)('logs', { recursive: true });\n}\n// Stream interface for Morgan HTTP logger\nexports.logStream = {\n    write: (message) => {\n        exports.logger.http(message.trim());\n    },\n};\n","import winston from 'winston';\n\nconst { combine, timestamp, printf, colorize, errors } = winston.format;\n\n// Custom log format\nconst logFormat = printf(({ level, message, timestamp, stack, ...meta }) => {\n  let log = `${timestamp} [${level}]: ${message}`;\n  \n  if (Object.keys(meta).length > 0) {\n    log += ` ${JSON.stringify(meta)}`;\n  }\n  \n  if (stack) {\n    log += `\\n${stack}`;\n  }\n  \n  return log;\n});\n\n// Create logger instance\nexport const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: combine(\n    timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n    errors({ stack: true }),\n    logFormat\n  ),\n  transports: [\n    // Console transport with colors for development\n    new winston.transports.Console({\n      format: combine(\n        colorize(),\n        timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n        errors({ stack: true }),\n        logFormat\n      ),\n    }),\n    \n    // File transport for errors\n    new winston.transports.File({\n      filename: 'logs/error.log',\n      level: 'error',\n      maxsize: 5242880, // 5MB\n      maxFiles: 5,\n    }),\n    \n    // File transport for all logs\n    new winston.transports.File({\n      filename: 'logs/combined.log',\n      maxsize: 5242880, // 5MB\n      maxFiles: 5,\n    }),\n  ],\n  // Handle uncaught exceptions\n  exceptionHandlers: [\n    new winston.transports.File({ filename: 'logs/exceptions.log' })\n  ],\n  // Handle unhandled promise rejections\n  rejectionHandlers: [\n    new winston.transports.File({ filename: 'logs/rejections.log' })\n  ]\n});\n\n// Create logs directory if it doesn't exist\nimport { existsSync, mkdirSync } from 'fs';\nif (!existsSync('logs')) {\n  mkdirSync('logs', { recursive: true });\n}\n\n// Stream interface for Morgan HTTP logger\nexport const logStream = {\n  write: (message: string) => {\n    logger.http(message.trim());\n  },\n};","module.exports = require(\"winston\");","module.exports = require(\"fs\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.requestIdMiddleware = exports.setupGlobalErrorHandlers = exports.notFoundHandler = exports.asyncHandler = exports.errorHandler = exports.ServiceUnavailableError = exports.InternalServerError = exports.UnauthorizedError = exports.ForbiddenError = exports.BadRequestError = exports.ConflictError = exports.NotFoundError = exports.ValidationError = void 0;\nconst zod_1 = require(\"zod\");\nconst logger_1 = require(\"../utils/logger\");\nclass ValidationError extends Error {\n    constructor(message, details) {\n        super(message);\n        this.details = details;\n        this.statusCode = 400;\n        this.code = 'VALIDATION_ERROR';\n        this.isOperational = true;\n        this.name = 'ValidationError';\n    }\n}\nexports.ValidationError = ValidationError;\nclass NotFoundError extends Error {\n    constructor(resource = 'Resource') {\n        super(`${resource} not found`);\n        this.statusCode = 404;\n        this.code = 'NOT_FOUND';\n        this.isOperational = true;\n        this.name = 'NotFoundError';\n    }\n}\nexports.NotFoundError = NotFoundError;\nclass ConflictError extends Error {\n    constructor(message, details) {\n        super(message);\n        this.details = details;\n        this.statusCode = 409;\n        this.code = 'CONFLICT';\n        this.isOperational = true;\n        this.name = 'ConflictError';\n    }\n}\nexports.ConflictError = ConflictError;\nclass BadRequestError extends Error {\n    constructor(message, details) {\n        super(message);\n        this.details = details;\n        this.statusCode = 400;\n        this.code = 'BAD_REQUEST';\n        this.isOperational = true;\n        this.name = 'BadRequestError';\n    }\n}\nexports.BadRequestError = BadRequestError;\nclass ForbiddenError extends Error {\n    constructor(message = 'Access forbidden') {\n        super(message);\n        this.statusCode = 403;\n        this.code = 'FORBIDDEN';\n        this.isOperational = true;\n        this.name = 'ForbiddenError';\n    }\n}\nexports.ForbiddenError = ForbiddenError;\nclass UnauthorizedError extends Error {\n    constructor(message = 'Authentication required') {\n        super(message);\n        this.statusCode = 401;\n        this.code = 'UNAUTHORIZED';\n        this.isOperational = true;\n        this.name = 'UnauthorizedError';\n    }\n}\nexports.UnauthorizedError = UnauthorizedError;\nclass InternalServerError extends Error {\n    constructor(message = 'Internal server error', details) {\n        super(message);\n        this.details = details;\n        this.statusCode = 500;\n        this.code = 'INTERNAL_SERVER_ERROR';\n        this.isOperational = true;\n        this.name = 'InternalServerError';\n    }\n}\nexports.InternalServerError = InternalServerError;\nclass ServiceUnavailableError extends Error {\n    constructor(message = 'Service temporarily unavailable') {\n        super(message);\n        this.statusCode = 503;\n        this.code = 'SERVICE_UNAVAILABLE';\n        this.isOperational = true;\n        this.name = 'ServiceUnavailableError';\n    }\n}\nexports.ServiceUnavailableError = ServiceUnavailableError;\nconst isDevelopment = process.env.NODE_ENV === 'development';\nconst isProduction = process.env.NODE_ENV === 'production';\nconst errorHandler = (error, req, res, next) => {\n    const apiError = error;\n    // Default error values\n    let statusCode = apiError.statusCode || 500;\n    let code = apiError.code || 'INTERNAL_SERVER_ERROR';\n    let message = error.message || 'An unexpected error occurred';\n    let details = apiError.details;\n    // Handle specific error types\n    if (error instanceof zod_1.ZodError) {\n        statusCode = 400;\n        code = 'VALIDATION_ERROR';\n        message = 'Validation failed';\n        details = {\n            issues: error.issues.map(issue => ({\n                field: issue.path.join('.'),\n                message: issue.message,\n                code: issue.code\n            }))\n        };\n    }\n    else if (error.name === 'JsonWebTokenError') {\n        statusCode = 401;\n        code = 'INVALID_TOKEN';\n        message = 'Invalid authentication token';\n    }\n    else if (error.name === 'TokenExpiredError') {\n        statusCode = 401;\n        code = 'TOKEN_EXPIRED';\n        message = 'Authentication token has expired';\n    }\n    else if (error.name === 'SequelizeValidationError') {\n        statusCode = 400;\n        code = 'DATABASE_VALIDATION_ERROR';\n        message = 'Database validation failed';\n        details = error.errors?.map((err) => ({\n            field: err.path,\n            message: err.message\n        }));\n    }\n    else if (error.name === 'SequelizeUniqueConstraintError') {\n        statusCode = 409;\n        code = 'DUPLICATE_ENTRY';\n        message = 'Resource already exists';\n        details = error.errors?.map((err) => ({\n            field: err.path,\n            message: err.message\n        }));\n    }\n    else if (error.name === 'SequelizeForeignKeyConstraintError') {\n        statusCode = 400;\n        code = 'FOREIGN_KEY_CONSTRAINT';\n        message = 'Invalid reference to related resource';\n    }\n    // Generate unique request ID if not present\n    const requestId = req.requestId || generateRequestId();\n    // Create error response\n    const errorResponse = {\n        error: getErrorName(statusCode),\n        message,\n        code,\n        timestamp: new Date().toISOString(),\n        path: req.originalUrl,\n        method: req.method,\n        requestId\n    };\n    // Add details in development or for client errors (4xx)\n    if (details && (isDevelopment || statusCode < 500)) {\n        errorResponse.details = details;\n    }\n    // Add stack trace in development\n    if (isDevelopment && error.stack) {\n        errorResponse.stack = error.stack;\n    }\n    // Log error\n    const logLevel = statusCode >= 500 ? 'error' : 'warn';\n    const logMessage = `${req.method} ${req.originalUrl} - ${statusCode} ${message}`;\n    const logMeta = {\n        requestId,\n        userId: req.user?.id,\n        userAgent: req.get('User-Agent'),\n        ip: req.ip,\n        statusCode,\n        code,\n        ...(details && { details }),\n        ...(isDevelopment && error.stack && { stack: error.stack })\n    };\n    if (logLevel === 'error') {\n        logger_1.logger.error(logMessage, logMeta);\n    }\n    else {\n        logger_1.logger.warn(logMessage, logMeta);\n    }\n    // Send error response\n    res.status(statusCode).json(errorResponse);\n};\nexports.errorHandler = errorHandler;\n// Handle async errors\nconst asyncHandler = (fn) => {\n    return (req, res, next) => {\n        Promise.resolve(fn(req, res, next)).catch(next);\n    };\n};\nexports.asyncHandler = asyncHandler;\n// 404 handler for undefined routes\nconst notFoundHandler = (req, res, next) => {\n    const error = new NotFoundError(`Route ${req.originalUrl} not found`);\n    next(error);\n};\nexports.notFoundHandler = notFoundHandler;\n// Unhandled error handlers\nconst setupGlobalErrorHandlers = () => {\n    process.on('uncaughtException', (error) => {\n        logger_1.logger.error('Uncaught Exception:', error);\n        // Graceful shutdown\n        process.exit(1);\n    });\n    process.on('unhandledRejection', (reason, promise) => {\n        logger_1.logger.error('Unhandled Rejection at:', promise, 'reason:', reason);\n        // Graceful shutdown\n        process.exit(1);\n    });\n    process.on('SIGTERM', () => {\n        logger_1.logger.info('SIGTERM received, shutting down gracefully');\n        // Perform cleanup here\n        process.exit(0);\n    });\n    process.on('SIGINT', () => {\n        logger_1.logger.info('SIGINT received, shutting down gracefully');\n        // Perform cleanup here\n        process.exit(0);\n    });\n};\nexports.setupGlobalErrorHandlers = setupGlobalErrorHandlers;\n// Helper functions\nfunction getErrorName(statusCode) {\n    switch (statusCode) {\n        case 400: return 'Bad Request';\n        case 401: return 'Unauthorized';\n        case 403: return 'Forbidden';\n        case 404: return 'Not Found';\n        case 409: return 'Conflict';\n        case 422: return 'Unprocessable Entity';\n        case 429: return 'Too Many Requests';\n        case 500: return 'Internal Server Error';\n        case 502: return 'Bad Gateway';\n        case 503: return 'Service Unavailable';\n        case 504: return 'Gateway Timeout';\n        default: return statusCode >= 500 ? 'Server Error' : 'Client Error';\n    }\n}\nfunction generateRequestId() {\n    return Math.random().toString(36).substring(2, 15) +\n        Math.random().toString(36).substring(2, 15);\n}\n// Request ID middleware\nconst requestIdMiddleware = (req, res, next) => {\n    req.requestId = req.headers['x-request-id'] || generateRequestId();\n    res.setHeader('X-Request-ID', req.requestId);\n    next();\n};\nexports.requestIdMiddleware = requestIdMiddleware;\n","import { Request, Response, NextFunction } from 'express';\nimport { ZodError } from 'zod';\nimport { logger } from '../utils/logger';\n\nexport interface ApiError extends Error {\n  statusCode?: number;\n  code?: string;\n  details?: any;\n  isOperational?: boolean;\n}\n\nexport class ValidationError extends Error implements ApiError {\n  statusCode = 400;\n  code = 'VALIDATION_ERROR';\n  isOperational = true;\n  \n  constructor(message: string, public details?: any) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\nexport class NotFoundError extends Error implements ApiError {\n  statusCode = 404;\n  code = 'NOT_FOUND';\n  isOperational = true;\n  \n  constructor(resource: string = 'Resource') {\n    super(`${resource} not found`);\n    this.name = 'NotFoundError';\n  }\n}\n\nexport class ConflictError extends Error implements ApiError {\n  statusCode = 409;\n  code = 'CONFLICT';\n  isOperational = true;\n  \n  constructor(message: string, public details?: any) {\n    super(message);\n    this.name = 'ConflictError';\n  }\n}\n\nexport class BadRequestError extends Error implements ApiError {\n  statusCode = 400;\n  code = 'BAD_REQUEST';\n  isOperational = true;\n  \n  constructor(message: string, public details?: any) {\n    super(message);\n    this.name = 'BadRequestError';\n  }\n}\n\nexport class ForbiddenError extends Error implements ApiError {\n  statusCode = 403;\n  code = 'FORBIDDEN';\n  isOperational = true;\n  \n  constructor(message: string = 'Access forbidden') {\n    super(message);\n    this.name = 'ForbiddenError';\n  }\n}\n\nexport class UnauthorizedError extends Error implements ApiError {\n  statusCode = 401;\n  code = 'UNAUTHORIZED';\n  isOperational = true;\n  \n  constructor(message: string = 'Authentication required') {\n    super(message);\n    this.name = 'UnauthorizedError';\n  }\n}\n\nexport class InternalServerError extends Error implements ApiError {\n  statusCode = 500;\n  code = 'INTERNAL_SERVER_ERROR';\n  isOperational = true;\n  \n  constructor(message: string = 'Internal server error', public details?: any) {\n    super(message);\n    this.name = 'InternalServerError';\n  }\n}\n\nexport class ServiceUnavailableError extends Error implements ApiError {\n  statusCode = 503;\n  code = 'SERVICE_UNAVAILABLE';\n  isOperational = true;\n  \n  constructor(message: string = 'Service temporarily unavailable') {\n    super(message);\n    this.name = 'ServiceUnavailableError';\n  }\n}\n\ninterface ErrorResponse {\n  error: string;\n  message: string;\n  code?: string;\n  details?: any;\n  stack?: string;\n  timestamp: string;\n  path: string;\n  method: string;\n  requestId?: string;\n}\n\nconst isDevelopment = process.env.NODE_ENV === 'development';\nconst isProduction = process.env.NODE_ENV === 'production';\n\nexport const errorHandler = (\n  error: Error | ApiError,\n  req: Request,\n  res: Response,\n  next: NextFunction\n): void => {\n  const apiError = error as ApiError;\n  \n  // Default error values\n  let statusCode = apiError.statusCode || 500;\n  let code = apiError.code || 'INTERNAL_SERVER_ERROR';\n  let message = error.message || 'An unexpected error occurred';\n  let details = apiError.details;\n  \n  // Handle specific error types\n  if (error instanceof ZodError) {\n    statusCode = 400;\n    code = 'VALIDATION_ERROR';\n    message = 'Validation failed';\n    details = {\n      issues: error.issues.map(issue => ({\n        field: issue.path.join('.'),\n        message: issue.message,\n        code: issue.code\n      }))\n    };\n  } else if (error.name === 'JsonWebTokenError') {\n    statusCode = 401;\n    code = 'INVALID_TOKEN';\n    message = 'Invalid authentication token';\n  } else if (error.name === 'TokenExpiredError') {\n    statusCode = 401;\n    code = 'TOKEN_EXPIRED';\n    message = 'Authentication token has expired';\n  } else if (error.name === 'SequelizeValidationError') {\n    statusCode = 400;\n    code = 'DATABASE_VALIDATION_ERROR';\n    message = 'Database validation failed';\n    details = (error as any).errors?.map((err: any) => ({\n      field: err.path,\n      message: err.message\n    }));\n  } else if (error.name === 'SequelizeUniqueConstraintError') {\n    statusCode = 409;\n    code = 'DUPLICATE_ENTRY';\n    message = 'Resource already exists';\n    details = (error as any).errors?.map((err: any) => ({\n      field: err.path,\n      message: err.message\n    }));\n  } else if (error.name === 'SequelizeForeignKeyConstraintError') {\n    statusCode = 400;\n    code = 'FOREIGN_KEY_CONSTRAINT';\n    message = 'Invalid reference to related resource';\n  }\n  \n  // Generate unique request ID if not present\n  const requestId = (req as any).requestId || generateRequestId();\n  \n  // Create error response\n  const errorResponse: ErrorResponse = {\n    error: getErrorName(statusCode),\n    message,\n    code,\n    timestamp: new Date().toISOString(),\n    path: req.originalUrl,\n    method: req.method,\n    requestId\n  };\n  \n  // Add details in development or for client errors (4xx)\n  if (details && (isDevelopment || statusCode < 500)) {\n    errorResponse.details = details;\n  }\n  \n  // Add stack trace in development\n  if (isDevelopment && error.stack) {\n    errorResponse.stack = error.stack;\n  }\n  \n  // Log error\n  const logLevel = statusCode >= 500 ? 'error' : 'warn';\n  const logMessage = `${req.method} ${req.originalUrl} - ${statusCode} ${message}`;\n  \n  const logMeta = {\n    requestId,\n    userId: (req as any).user?.id,\n    userAgent: req.get('User-Agent'),\n    ip: req.ip,\n    statusCode,\n    code,\n    ...(details && { details }),\n    ...(isDevelopment && error.stack && { stack: error.stack })\n  };\n  \n  if (logLevel === 'error') {\n    logger.error(logMessage, logMeta);\n  } else {\n    logger.warn(logMessage, logMeta);\n  }\n  \n  // Send error response\n  res.status(statusCode).json(errorResponse);\n};\n\n// Handle async errors\nexport const asyncHandler = (fn: Function) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n};\n\n// 404 handler for undefined routes\nexport const notFoundHandler = (req: Request, res: Response, next: NextFunction): void => {\n  const error = new NotFoundError(`Route ${req.originalUrl} not found`);\n  next(error);\n};\n\n// Unhandled error handlers\nexport const setupGlobalErrorHandlers = (): void => {\n  process.on('uncaughtException', (error: Error) => {\n    logger.error('Uncaught Exception:', error);\n    \n    // Graceful shutdown\n    process.exit(1);\n  });\n  \n  process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {\n    logger.error('Unhandled Rejection at:', promise, 'reason:', reason);\n    \n    // Graceful shutdown\n    process.exit(1);\n  });\n  \n  process.on('SIGTERM', () => {\n    logger.info('SIGTERM received, shutting down gracefully');\n    // Perform cleanup here\n    process.exit(0);\n  });\n  \n  process.on('SIGINT', () => {\n    logger.info('SIGINT received, shutting down gracefully');\n    // Perform cleanup here\n    process.exit(0);\n  });\n};\n\n// Helper functions\nfunction getErrorName(statusCode: number): string {\n  switch (statusCode) {\n    case 400: return 'Bad Request';\n    case 401: return 'Unauthorized';\n    case 403: return 'Forbidden';\n    case 404: return 'Not Found';\n    case 409: return 'Conflict';\n    case 422: return 'Unprocessable Entity';\n    case 429: return 'Too Many Requests';\n    case 500: return 'Internal Server Error';\n    case 502: return 'Bad Gateway';\n    case 503: return 'Service Unavailable';\n    case 504: return 'Gateway Timeout';\n    default: return statusCode >= 500 ? 'Server Error' : 'Client Error';\n  }\n}\n\nfunction generateRequestId(): string {\n  return Math.random().toString(36).substring(2, 15) + \n         Math.random().toString(36).substring(2, 15);\n}\n\n// Request ID middleware\nexport const requestIdMiddleware = (req: Request, res: Response, next: NextFunction): void => {\n  (req as any).requestId = req.headers['x-request-id'] || generateRequestId();\n  res.setHeader('X-Request-ID', (req as any).requestId);\n  next();\n};","module.exports = require(\"zod\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.optionalAuth = exports.refreshToken = exports.verifyToken = exports.generateToken = exports.requireCompanyAccess = exports.requirePermission = exports.requireRole = exports.authMiddleware = exports.AuthError = void 0;\nconst tslib_1 = require(\"tslib\");\nconst jsonwebtoken_1 = tslib_1.__importDefault(require(\"jsonwebtoken\"));\nconst logger_1 = require(\"../utils/logger\");\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-this-in-production';\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '24h';\nclass AuthError extends Error {\n    constructor(message, statusCode = 401, code = 'AUTH_ERROR') {\n        super(message);\n        this.statusCode = statusCode;\n        this.code = code;\n        this.name = 'AuthError';\n    }\n}\nexports.AuthError = AuthError;\nconst authMiddleware = async (req, res, next) => {\n    try {\n        const authHeader = req.headers.authorization;\n        if (!authHeader) {\n            throw new AuthError('Authorization header missing', 401, 'MISSING_TOKEN');\n        }\n        const token = authHeader.startsWith('Bearer ')\n            ? authHeader.slice(7)\n            : authHeader;\n        if (!token) {\n            throw new AuthError('Token missing', 401, 'MISSING_TOKEN');\n        }\n        // Verify JWT token\n        const decoded = jsonwebtoken_1.default.verify(token, JWT_SECRET);\n        // Attach user info to request\n        req.user = {\n            id: decoded.sub,\n            email: decoded.email,\n            name: decoded.name,\n            roles: decoded.roles || [],\n            permissions: decoded.permissions || [],\n            companyId: decoded.companyId\n        };\n        logger_1.logger.debug('User authenticated', {\n            userId: req.user.id,\n            email: req.user.email,\n            roles: req.user.roles\n        });\n        next();\n    }\n    catch (error) {\n        if (error instanceof jsonwebtoken_1.default.JsonWebTokenError) {\n            logger_1.logger.warn('Invalid JWT token', { error: error.message });\n            return res.status(401).json({\n                error: 'Unauthorized',\n                message: 'Invalid token',\n                code: 'INVALID_TOKEN'\n            });\n        }\n        if (error instanceof AuthError) {\n            logger_1.logger.warn('Authentication failed', { error: error.message, code: error.code });\n            return res.status(error.statusCode).json({\n                error: 'Unauthorized',\n                message: error.message,\n                code: error.code\n            });\n        }\n        logger_1.logger.error('Authentication error', error);\n        res.status(500).json({\n            error: 'Internal Server Error',\n            message: 'Authentication service error'\n        });\n    }\n};\nexports.authMiddleware = authMiddleware;\n// Role-based access control middleware factory\nconst requireRole = (requiredRoles) => {\n    const roles = Array.isArray(requiredRoles) ? requiredRoles : [requiredRoles];\n    return (req, res, next) => {\n        if (!req.user) {\n            return res.status(401).json({\n                error: 'Unauthorized',\n                message: 'Authentication required'\n            });\n        }\n        const hasRequiredRole = roles.some(role => req.user.roles.includes(role));\n        if (!hasRequiredRole) {\n            logger_1.logger.warn('Access denied - insufficient role', {\n                userId: req.user.id,\n                userRoles: req.user.roles,\n                requiredRoles: roles\n            });\n            return res.status(403).json({\n                error: 'Forbidden',\n                message: 'Insufficient permissions',\n                requiredRoles: roles,\n                userRoles: req.user.roles\n            });\n        }\n        next();\n    };\n};\nexports.requireRole = requireRole;\n// Permission-based access control middleware factory\nconst requirePermission = (requiredPermissions) => {\n    const permissions = Array.isArray(requiredPermissions) ? requiredPermissions : [requiredPermissions];\n    return (req, res, next) => {\n        if (!req.user) {\n            return res.status(401).json({\n                error: 'Unauthorized',\n                message: 'Authentication required'\n            });\n        }\n        const hasRequiredPermission = permissions.some(permission => req.user.permissions.includes(permission));\n        if (!hasRequiredPermission) {\n            logger_1.logger.warn('Access denied - insufficient permissions', {\n                userId: req.user.id,\n                userPermissions: req.user.permissions,\n                requiredPermissions: permissions\n            });\n            return res.status(403).json({\n                error: 'Forbidden',\n                message: 'Insufficient permissions',\n                requiredPermissions: permissions,\n                userPermissions: req.user.permissions\n            });\n        }\n        next();\n    };\n};\nexports.requirePermission = requirePermission;\n// Company isolation middleware - ensures users can only access their company's data\nconst requireCompanyAccess = (req, res, next) => {\n    if (!req.user?.companyId) {\n        return res.status(403).json({\n            error: 'Forbidden',\n            message: 'Company access required'\n        });\n    }\n    // Add company filter to request for use in controllers\n    req.companyFilter = { companyId: req.user.companyId };\n    next();\n};\nexports.requireCompanyAccess = requireCompanyAccess;\n// Utility functions for JWT operations\nconst generateToken = (payload) => {\n    return jsonwebtoken_1.default.sign(payload, JWT_SECRET, {\n        expiresIn: JWT_EXPIRES_IN,\n        issuer: 'blacktop-blackout',\n        audience: 'blacktop-users'\n    });\n};\nexports.generateToken = generateToken;\nconst verifyToken = (token) => {\n    return jsonwebtoken_1.default.verify(token, JWT_SECRET);\n};\nexports.verifyToken = verifyToken;\nconst refreshToken = (token) => {\n    try {\n        const decoded = jsonwebtoken_1.default.verify(token, JWT_SECRET, { ignoreExpiration: true });\n        // Generate new token with same payload but new expiration\n        const newPayload = {\n            sub: decoded.sub,\n            email: decoded.email,\n            name: decoded.name,\n            roles: decoded.roles,\n            permissions: decoded.permissions,\n            companyId: decoded.companyId\n        };\n        return (0, exports.generateToken)(newPayload);\n    }\n    catch (error) {\n        throw new AuthError('Invalid token for refresh', 401, 'INVALID_REFRESH_TOKEN');\n    }\n};\nexports.refreshToken = refreshToken;\n// Optional authentication middleware (doesn't throw error if no token)\nconst optionalAuth = async (req, res, next) => {\n    try {\n        const authHeader = req.headers.authorization;\n        if (authHeader) {\n            const token = authHeader.startsWith('Bearer ')\n                ? authHeader.slice(7)\n                : authHeader;\n            if (token) {\n                const decoded = jsonwebtoken_1.default.verify(token, JWT_SECRET);\n                req.user = {\n                    id: decoded.sub,\n                    email: decoded.email,\n                    name: decoded.name,\n                    roles: decoded.roles || [],\n                    permissions: decoded.permissions || [],\n                    companyId: decoded.companyId\n                };\n            }\n        }\n        next();\n    }\n    catch (error) {\n        // Ignore authentication errors for optional auth\n        logger_1.logger.debug('Optional authentication failed', error);\n        next();\n    }\n};\nexports.optionalAuth = optionalAuth;\n","import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport { logger } from '../utils/logger';\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    name: string;\n    roles: string[];\n    permissions: string[];\n    companyId?: string;\n  };\n}\n\nexport interface JWTPayload {\n  sub: string; // user id\n  email: string;\n  name: string;\n  roles: string[];\n  permissions: string[];\n  companyId?: string;\n  iat: number;\n  exp: number;\n}\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-this-in-production';\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '24h';\n\nexport class AuthError extends Error {\n  constructor(\n    message: string,\n    public statusCode: number = 401,\n    public code: string = 'AUTH_ERROR'\n  ) {\n    super(message);\n    this.name = 'AuthError';\n  }\n}\n\nexport const authMiddleware = async (\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n): Promise<void | Response> => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader) {\n      throw new AuthError('Authorization header missing', 401, 'MISSING_TOKEN');\n    }\n    \n    const token = authHeader.startsWith('Bearer ') \n      ? authHeader.slice(7)\n      : authHeader;\n    \n    if (!token) {\n      throw new AuthError('Token missing', 401, 'MISSING_TOKEN');\n    }\n    \n    // Verify JWT token\n    const decoded = jwt.verify(token, JWT_SECRET) as JWTPayload;\n    \n    // Attach user info to request\n    req.user = {\n      id: decoded.sub,\n      email: decoded.email,\n      name: decoded.name,\n      roles: decoded.roles || [],\n      permissions: decoded.permissions || [],\n      companyId: decoded.companyId\n    };\n    \n    logger.debug('User authenticated', {\n      userId: req.user.id,\n      email: req.user.email,\n      roles: req.user.roles\n    });\n    \n    next();\n  } catch (error) {\n    if (error instanceof jwt.JsonWebTokenError) {\n      logger.warn('Invalid JWT token', { error: error.message });\n      return res.status(401).json({\n        error: 'Unauthorized',\n        message: 'Invalid token',\n        code: 'INVALID_TOKEN'\n      });\n    }\n    \n    if (error instanceof AuthError) {\n      logger.warn('Authentication failed', { error: error.message, code: error.code });\n      return res.status(error.statusCode).json({\n        error: 'Unauthorized',\n        message: error.message,\n        code: error.code\n      });\n    }\n    \n    logger.error('Authentication error', error);\n    res.status(500).json({\n      error: 'Internal Server Error',\n      message: 'Authentication service error'\n    });\n  }\n};\n\n// Role-based access control middleware factory\nexport const requireRole = (requiredRoles: string | string[]) => {\n  const roles = Array.isArray(requiredRoles) ? requiredRoles : [requiredRoles];\n  \n  return (req: AuthenticatedRequest, res: Response, next: NextFunction): void | Response => {\n    if (!req.user) {\n      return res.status(401).json({\n        error: 'Unauthorized',\n        message: 'Authentication required'\n      });\n    }\n    \n    const hasRequiredRole = roles.some(role => req.user!.roles.includes(role));\n    \n    if (!hasRequiredRole) {\n      logger.warn('Access denied - insufficient role', {\n        userId: req.user.id,\n        userRoles: req.user.roles,\n        requiredRoles: roles\n      });\n      \n      return res.status(403).json({\n        error: 'Forbidden',\n        message: 'Insufficient permissions',\n        requiredRoles: roles,\n        userRoles: req.user.roles\n      });\n    }\n    \n    next();\n  };\n};\n\n// Permission-based access control middleware factory\nexport const requirePermission = (requiredPermissions: string | string[]) => {\n  const permissions = Array.isArray(requiredPermissions) ? requiredPermissions : [requiredPermissions];\n  \n  return (req: AuthenticatedRequest, res: Response, next: NextFunction): void | Response => {\n    if (!req.user) {\n      return res.status(401).json({\n        error: 'Unauthorized',\n        message: 'Authentication required'\n      });\n    }\n    \n    const hasRequiredPermission = permissions.some(permission => \n      req.user!.permissions.includes(permission)\n    );\n    \n    if (!hasRequiredPermission) {\n      logger.warn('Access denied - insufficient permissions', {\n        userId: req.user.id,\n        userPermissions: req.user.permissions,\n        requiredPermissions: permissions\n      });\n      \n      return res.status(403).json({\n        error: 'Forbidden',\n        message: 'Insufficient permissions',\n        requiredPermissions: permissions,\n        userPermissions: req.user.permissions\n      });\n    }\n    \n    next();\n  };\n};\n\n// Company isolation middleware - ensures users can only access their company's data\nexport const requireCompanyAccess = (req: AuthenticatedRequest, res: Response, next: NextFunction): void | Response => {\n  if (!req.user?.companyId) {\n    return res.status(403).json({\n      error: 'Forbidden',\n      message: 'Company access required'\n    });\n  }\n  \n  // Add company filter to request for use in controllers\n  (req as any).companyFilter = { companyId: req.user.companyId };\n  \n  next();\n};\n\n// Utility functions for JWT operations\nexport const generateToken = (payload: Omit<JWTPayload, 'iat' | 'exp'>): string => {\n  return jwt.sign(payload as object, JWT_SECRET!, {\n    expiresIn: JWT_EXPIRES_IN,\n    issuer: 'blacktop-blackout',\n    audience: 'blacktop-users'\n  } as jwt.SignOptions);\n};\n\nexport const verifyToken = (token: string): JWTPayload => {\n  return jwt.verify(token, JWT_SECRET) as JWTPayload;\n};\n\nexport const refreshToken = (token: string): string => {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET, { ignoreExpiration: true }) as JWTPayload;\n    \n    // Generate new token with same payload but new expiration\n    const newPayload = {\n      sub: decoded.sub,\n      email: decoded.email,\n      name: decoded.name,\n      roles: decoded.roles,\n      permissions: decoded.permissions,\n      companyId: decoded.companyId\n    };\n    \n    return generateToken(newPayload);\n  } catch (error) {\n    throw new AuthError('Invalid token for refresh', 401, 'INVALID_REFRESH_TOKEN');\n  }\n};\n\n// Optional authentication middleware (doesn't throw error if no token)\nexport const optionalAuth = async (\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n): Promise<void> => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (authHeader) {\n      const token = authHeader.startsWith('Bearer ') \n        ? authHeader.slice(7)\n        : authHeader;\n      \n      if (token) {\n        const decoded = jwt.verify(token, JWT_SECRET) as JWTPayload;\n        req.user = {\n          id: decoded.sub,\n          email: decoded.email,\n          name: decoded.name,\n          roles: decoded.roles || [],\n          permissions: decoded.permissions || [],\n          companyId: decoded.companyId\n        };\n      }\n    }\n    \n    next();\n  } catch (error) {\n    // Ignore authentication errors for optional auth\n    logger.debug('Optional authentication failed', error);\n    next();\n  }\n};","module.exports = require(\"jsonwebtoken\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pluginManager = void 0;\nconst tslib_1 = require(\"tslib\");\nconst crypto_1 = tslib_1.__importDefault(require(\"crypto\"));\nconst promises_1 = tslib_1.__importDefault(require(\"fs/promises\"));\nconst path_1 = tslib_1.__importDefault(require(\"path\"));\nconst logger_1 = require(\"../utils/logger\");\nconst events_1 = require(\"events\");\nclass PluginManagerClass {\n    constructor() {\n        this.plugins = new Map();\n        this.trustedSigners = new Set();\n        this.pluginsDirectory = process.env.PLUGINS_DIR || './plugins';\n        this.events = new events_1.EventEmitter();\n        // Add trusted signer public keys\n        this.initializeTrustedSigners();\n    }\n    initializeTrustedSigners() {\n        // TODO: Load trusted public keys from configuration\n        const trustedKeys = process.env.TRUSTED_PLUGIN_SIGNERS?.split(',') || [];\n        trustedKeys.forEach(key => this.trustedSigners.add(key.trim()));\n        logger_1.logger.info(`Initialized with ${this.trustedSigners.size} trusted plugin signers`);\n    }\n    async initialize() {\n        try {\n            logger_1.logger.info('Initializing Plugin Manager...');\n            // Ensure plugins directory exists\n            await promises_1.default.mkdir(this.pluginsDirectory, { recursive: true });\n            // Load existing plugins\n            await this.loadExistingPlugins();\n            logger_1.logger.info('Plugin Manager initialized successfully');\n        }\n        catch (error) {\n            logger_1.logger.error('Failed to initialize Plugin Manager:', error);\n            throw error;\n        }\n    }\n    async loadExistingPlugins() {\n        try {\n            const pluginDirs = await promises_1.default.readdir(this.pluginsDirectory);\n            for (const dir of pluginDirs) {\n                const pluginPath = path_1.default.join(this.pluginsDirectory, dir);\n                const stats = await promises_1.default.stat(pluginPath);\n                if (stats.isDirectory()) {\n                    try {\n                        await this.loadPluginFromDirectory(pluginPath);\n                    }\n                    catch (error) {\n                        logger_1.logger.warn(`Failed to load plugin from ${dir}:`, error);\n                    }\n                }\n            }\n            logger_1.logger.info(`Loaded ${this.plugins.size} existing plugins`);\n        }\n        catch (error) {\n            logger_1.logger.error('Failed to load existing plugins:', error);\n        }\n    }\n    async loadPluginFromDirectory(pluginPath) {\n        const packageJsonPath = path_1.default.join(pluginPath, 'package.json');\n        const packageJson = JSON.parse(await promises_1.default.readFile(packageJsonPath, 'utf-8'));\n        const pluginName = packageJson.name;\n        const mainFile = path_1.default.join(pluginPath, packageJson.main || 'index.js');\n        // Verify plugin signature if present\n        if (packageJson.signature) {\n            await this.verifyPluginSignature(pluginPath, packageJson);\n        }\n        await this.loadPlugin(pluginName, mainFile, packageJson);\n    }\n    async verifyPluginSignature(pluginPath, packageJson) {\n        if (!this.trustedSigners.has(packageJson.author)) {\n            throw new Error(`Plugin author ${packageJson.author} is not in trusted signers list`);\n        }\n        // Calculate checksum of plugin files\n        const checksum = await this.calculatePluginChecksum(pluginPath);\n        if (packageJson.checksum && packageJson.checksum !== checksum) {\n            throw new Error('Plugin checksum verification failed');\n        }\n        logger_1.logger.debug(`Plugin signature verified for ${packageJson.name}`);\n    }\n    async calculatePluginChecksum(pluginPath) {\n        const hash = crypto_1.default.createHash('sha256');\n        const files = await this.getPluginFiles(pluginPath);\n        for (const file of files.sort()) {\n            const content = await promises_1.default.readFile(path_1.default.join(pluginPath, file));\n            hash.update(content);\n        }\n        return hash.digest('hex');\n    }\n    async getPluginFiles(pluginPath) {\n        const files = [];\n        async function traverse(dir, basePath = '') {\n            const entries = await promises_1.default.readdir(dir);\n            for (const entry of entries) {\n                const fullPath = path_1.default.join(dir, entry);\n                const relativePath = path_1.default.join(basePath, entry);\n                const stats = await promises_1.default.stat(fullPath);\n                if (stats.isDirectory() && entry !== 'node_modules') {\n                    await traverse(fullPath, relativePath);\n                }\n                else if (stats.isFile()) {\n                    files.push(relativePath);\n                }\n            }\n        }\n        await traverse(pluginPath);\n        return files;\n    }\n    async installPlugin(source, options) {\n        // Simplified installation - just log for now\n        logger_1.logger.info(`Plugin installation requested: ${source}`);\n        logger_1.logger.warn('Plugin installation will be implemented with package manager integration');\n    }\n    async loadPlugin(name, mainFile, metadata) {\n        try {\n            logger_1.logger.info(`Loading plugin: ${name}`);\n            const plugin = {\n                metadata: metadata || await this.loadPluginMetadata(mainFile),\n                instance: null,\n                context: this.createPluginContext(name),\n                status: 'loading',\n                loadedAt: new Date()\n            };\n            // For now, just create a placeholder instance\n            plugin.instance = {\n                name,\n                initialized: false,\n                getApi: () => ({ name, status: 'loaded' })\n            };\n            plugin.status = 'active';\n            this.plugins.set(name, plugin);\n            logger_1.logger.info(`Plugin loaded successfully: ${name}`);\n            this.events.emit('plugin:loaded', { name, metadata: plugin.metadata });\n        }\n        catch (error) {\n            logger_1.logger.error(`Failed to load plugin ${name}:`, error);\n            throw error;\n        }\n    }\n    async loadPluginMetadata(mainFile) {\n        const packageJsonPath = path_1.default.join(path_1.default.dirname(mainFile), 'package.json');\n        try {\n            const packageJson = JSON.parse(await promises_1.default.readFile(packageJsonPath, 'utf-8'));\n            return {\n                name: packageJson.name,\n                version: packageJson.version,\n                description: packageJson.description || '',\n                author: packageJson.author || 'Unknown',\n                type: packageJson.pluginType || 'backend',\n                dependencies: packageJson.pluginDependencies || [],\n                permissions: packageJson.pluginPermissions || []\n            };\n        }\n        catch (error) {\n            logger_1.logger.warn(`Could not load plugin metadata from ${packageJsonPath}:`, error);\n            return {\n                name: 'unknown-plugin',\n                version: '1.0.0',\n                description: 'Plugin loaded without metadata',\n                author: 'Unknown',\n                type: 'backend'\n            };\n        }\n    }\n    createPluginContext(pluginName) {\n        return {\n            logger: {\n                info: (message, meta) => {\n                    logger_1.logger.info(`[${pluginName}] ${message}`, meta);\n                    return logger_1.logger;\n                },\n                error: (message, meta) => {\n                    logger_1.logger.error(`[${pluginName}] ${message}`, meta);\n                    return logger_1.logger;\n                },\n                warn: (message, meta) => {\n                    logger_1.logger.warn(`[${pluginName}] ${message}`, meta);\n                    return logger_1.logger;\n                },\n                debug: (message, meta) => {\n                    logger_1.logger.debug(`[${pluginName}] ${message}`, meta);\n                    return logger_1.logger;\n                }\n            },\n            database: null, // TODO: Provide restricted database access\n            config: {},\n            events: this.events\n        };\n    }\n    async unloadPlugin(name) {\n        const plugin = this.plugins.get(name);\n        if (!plugin) {\n            throw new Error(`Plugin ${name} not found`);\n        }\n        try {\n            logger_1.logger.info(`Unloading plugin: ${name}`);\n            plugin.status = 'inactive';\n            this.plugins.delete(name);\n            logger_1.logger.info(`Plugin unloaded: ${name}`);\n            this.events.emit('plugin:unloaded', { name });\n        }\n        catch (error) {\n            logger_1.logger.error(`Failed to unload plugin ${name}:`, error);\n            plugin.status = 'error';\n            plugin.lastError = error.message;\n            throw error;\n        }\n    }\n    async enablePlugin(name) {\n        const plugin = this.plugins.get(name);\n        if (!plugin) {\n            throw new Error(`Plugin ${name} not found`);\n        }\n        plugin.status = 'active';\n        this.events.emit('plugin:enabled', { name });\n    }\n    async disablePlugin(name) {\n        const plugin = this.plugins.get(name);\n        if (!plugin) {\n            throw new Error(`Plugin ${name} not found`);\n        }\n        plugin.status = 'inactive';\n        this.events.emit('plugin:disabled', { name });\n    }\n    getLoadedPlugins() {\n        return Array.from(this.plugins.values());\n    }\n    getPlugin(name) {\n        return this.plugins.get(name);\n    }\n    getPluginApi(name) {\n        const plugin = this.plugins.get(name);\n        if (!plugin || plugin.status !== 'active') {\n            return null;\n        }\n        return plugin.instance.getApi ? plugin.instance.getApi() : plugin.instance;\n    }\n    async shutdown() {\n        logger_1.logger.info('Shutting down Plugin Manager...');\n        for (const [name, plugin] of this.plugins) {\n            try {\n                await this.unloadPlugin(name);\n            }\n            catch (error) {\n                logger_1.logger.error(`Error unloading plugin ${name} during shutdown:`, error);\n            }\n        }\n        logger_1.logger.info('Plugin Manager shutdown complete');\n    }\n}\nexports.pluginManager = new PluginManagerClass();\n","import crypto from 'crypto';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { logger } from '../utils/logger';\nimport { EventEmitter } from 'events';\n\nexport interface PluginInterface {\n  name: string;\n  version: string;\n  description: string;\n  author: string;\n  type: 'backend' | 'frontend' | 'hybrid';\n  dependencies?: string[];\n  permissions?: string[];\n  signature?: string;\n  checksum?: string;\n  initialize?(context: PluginContext): Promise<void>;\n  activate?(): Promise<void>;\n  deactivate?(): Promise<void>;\n  destroy?(): Promise<void>;\n  getApi?(): any;\n}\n\nexport interface PluginContext {\n  logger: {\n    info: (message: string, meta?: any) => any;\n    error: (message: string, meta?: any) => any;\n    warn: (message: string, meta?: any) => any;\n    debug: (message: string, meta?: any) => any;\n  };\n  database: any;\n  config: any;\n  events: EventEmitter;\n  io?: any;\n}\n\nexport interface LoadedPlugin {\n  metadata: PluginInterface;\n  instance: any;\n  context: PluginContext;\n  status: 'loading' | 'active' | 'inactive' | 'error';\n  loadedAt: Date;\n  lastError?: string;\n}\n\nclass PluginManagerClass {\n  private plugins: Map<string, LoadedPlugin> = new Map();\n  private pluginsDirectory: string;\n  private trustedSigners: Set<string> = new Set();\n  private events: EventEmitter;\n\n  constructor() {\n    this.pluginsDirectory = process.env.PLUGINS_DIR || './plugins';\n    this.events = new EventEmitter();\n    \n    // Add trusted signer public keys\n    this.initializeTrustedSigners();\n  }\n\n  private initializeTrustedSigners(): void {\n    // TODO: Load trusted public keys from configuration\n    const trustedKeys = process.env.TRUSTED_PLUGIN_SIGNERS?.split(',') || [];\n    trustedKeys.forEach(key => this.trustedSigners.add(key.trim()));\n    \n    logger.info(`Initialized with ${this.trustedSigners.size} trusted plugin signers`);\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      logger.info('Initializing Plugin Manager...');\n      \n      // Ensure plugins directory exists\n      await fs.mkdir(this.pluginsDirectory, { recursive: true });\n      \n      // Load existing plugins\n      await this.loadExistingPlugins();\n      \n      logger.info('Plugin Manager initialized successfully');\n    } catch (error) {\n      logger.error('Failed to initialize Plugin Manager:', error);\n      throw error;\n    }\n  }\n\n  private async loadExistingPlugins(): Promise<void> {\n    try {\n      const pluginDirs = await fs.readdir(this.pluginsDirectory);\n      \n      for (const dir of pluginDirs) {\n        const pluginPath = path.join(this.pluginsDirectory, dir);\n        const stats = await fs.stat(pluginPath);\n        \n        if (stats.isDirectory()) {\n          try {\n            await this.loadPluginFromDirectory(pluginPath);\n          } catch (error) {\n            logger.warn(`Failed to load plugin from ${dir}:`, error);\n          }\n        }\n      }\n      \n      logger.info(`Loaded ${this.plugins.size} existing plugins`);\n    } catch (error) {\n      logger.error('Failed to load existing plugins:', error);\n    }\n  }\n\n  private async loadPluginFromDirectory(pluginPath: string): Promise<void> {\n    const packageJsonPath = path.join(pluginPath, 'package.json');\n    const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf-8'));\n    \n    const pluginName = packageJson.name;\n    const mainFile = path.join(pluginPath, packageJson.main || 'index.js');\n    \n    // Verify plugin signature if present\n    if (packageJson.signature) {\n      await this.verifyPluginSignature(pluginPath, packageJson);\n    }\n    \n    await this.loadPlugin(pluginName, mainFile, packageJson);\n  }\n\n  private async verifyPluginSignature(pluginPath: string, packageJson: any): Promise<void> {\n    if (!this.trustedSigners.has(packageJson.author)) {\n      throw new Error(`Plugin author ${packageJson.author} is not in trusted signers list`);\n    }\n    \n    // Calculate checksum of plugin files\n    const checksum = await this.calculatePluginChecksum(pluginPath);\n    \n    if (packageJson.checksum && packageJson.checksum !== checksum) {\n      throw new Error('Plugin checksum verification failed');\n    }\n    \n    logger.debug(`Plugin signature verified for ${packageJson.name}`);\n  }\n\n  private async calculatePluginChecksum(pluginPath: string): Promise<string> {\n    const hash = crypto.createHash('sha256');\n    const files = await this.getPluginFiles(pluginPath);\n    \n    for (const file of files.sort()) {\n      const content = await fs.readFile(path.join(pluginPath, file));\n      hash.update(content);\n    }\n    \n    return hash.digest('hex');\n  }\n\n  private async getPluginFiles(pluginPath: string): Promise<string[]> {\n    const files: string[] = [];\n    \n    async function traverse(dir: string, basePath: string = '') {\n      const entries = await fs.readdir(dir);\n      \n      for (const entry of entries) {\n        const fullPath = path.join(dir, entry);\n        const relativePath = path.join(basePath, entry);\n        const stats = await fs.stat(fullPath);\n        \n        if (stats.isDirectory() && entry !== 'node_modules') {\n          await traverse(fullPath, relativePath);\n        } else if (stats.isFile()) {\n          files.push(relativePath);\n        }\n      }\n    }\n    \n    await traverse(pluginPath);\n    return files;\n  }\n\n  async installPlugin(source: string, options?: { version?: string; trusted?: boolean }): Promise<void> {\n    // Simplified installation - just log for now\n    logger.info(`Plugin installation requested: ${source}`);\n    logger.warn('Plugin installation will be implemented with package manager integration');\n  }\n\n  async loadPlugin(name: string, mainFile: string, metadata?: any): Promise<void> {\n    try {\n      logger.info(`Loading plugin: ${name}`);\n      \n      const plugin: LoadedPlugin = {\n        metadata: metadata || await this.loadPluginMetadata(mainFile),\n        instance: null,\n        context: this.createPluginContext(name),\n        status: 'loading',\n        loadedAt: new Date()\n      };\n      \n      // For now, just create a placeholder instance\n      plugin.instance = {\n        name,\n        initialized: false,\n        getApi: () => ({ name, status: 'loaded' })\n      };\n      \n      plugin.status = 'active';\n      this.plugins.set(name, plugin);\n      \n      logger.info(`Plugin loaded successfully: ${name}`);\n      this.events.emit('plugin:loaded', { name, metadata: plugin.metadata });\n    } catch (error) {\n      logger.error(`Failed to load plugin ${name}:`, error);\n      throw error;\n    }\n  }\n\n  private async loadPluginMetadata(mainFile: string): Promise<PluginInterface> {\n    const packageJsonPath = path.join(path.dirname(mainFile), 'package.json');\n    \n    try {\n      const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf-8'));\n      \n      return {\n        name: packageJson.name,\n        version: packageJson.version,\n        description: packageJson.description || '',\n        author: packageJson.author || 'Unknown',\n        type: packageJson.pluginType || 'backend',\n        dependencies: packageJson.pluginDependencies || [],\n        permissions: packageJson.pluginPermissions || []\n      };\n    } catch (error) {\n      logger.warn(`Could not load plugin metadata from ${packageJsonPath}:`, error);\n      return {\n        name: 'unknown-plugin',\n        version: '1.0.0',\n        description: 'Plugin loaded without metadata',\n        author: 'Unknown',\n        type: 'backend'\n      };\n    }\n  }\n\n  private createPluginContext(pluginName: string): PluginContext {\n    return {\n      logger: {\n        info: (message: string, meta?: any) => {\n          logger.info(`[${pluginName}] ${message}`, meta);\n          return logger;\n        },\n        error: (message: string, meta?: any) => {\n          logger.error(`[${pluginName}] ${message}`, meta);\n          return logger;\n        },\n        warn: (message: string, meta?: any) => {\n          logger.warn(`[${pluginName}] ${message}`, meta);\n          return logger;\n        },\n        debug: (message: string, meta?: any) => {\n          logger.debug(`[${pluginName}] ${message}`, meta);\n          return logger;\n        }\n      },\n      database: null, // TODO: Provide restricted database access\n      config: {},\n      events: this.events\n    };\n  }\n\n  async unloadPlugin(name: string): Promise<void> {\n    const plugin = this.plugins.get(name);\n    if (!plugin) {\n      throw new Error(`Plugin ${name} not found`);\n    }\n    \n    try {\n      logger.info(`Unloading plugin: ${name}`);\n      \n      plugin.status = 'inactive';\n      this.plugins.delete(name);\n      \n      logger.info(`Plugin unloaded: ${name}`);\n      this.events.emit('plugin:unloaded', { name });\n    } catch (error) {\n      logger.error(`Failed to unload plugin ${name}:`, error);\n      plugin.status = 'error';\n      plugin.lastError = error.message;\n      throw error;\n    }\n  }\n\n  async enablePlugin(name: string): Promise<void> {\n    const plugin = this.plugins.get(name);\n    if (!plugin) {\n      throw new Error(`Plugin ${name} not found`);\n    }\n    \n    plugin.status = 'active';\n    this.events.emit('plugin:enabled', { name });\n  }\n\n  async disablePlugin(name: string): Promise<void> {\n    const plugin = this.plugins.get(name);\n    if (!plugin) {\n      throw new Error(`Plugin ${name} not found`);\n    }\n    \n    plugin.status = 'inactive';\n    this.events.emit('plugin:disabled', { name });\n  }\n\n  getLoadedPlugins(): LoadedPlugin[] {\n    return Array.from(this.plugins.values());\n  }\n\n  getPlugin(name: string): LoadedPlugin | undefined {\n    return this.plugins.get(name);\n  }\n\n  getPluginApi(name: string): any {\n    const plugin = this.plugins.get(name);\n    if (!plugin || plugin.status !== 'active') {\n      return null;\n    }\n    \n    return plugin.instance.getApi ? plugin.instance.getApi() : plugin.instance;\n  }\n\n  async shutdown(): Promise<void> {\n    logger.info('Shutting down Plugin Manager...');\n    \n    for (const [name, plugin] of this.plugins) {\n      try {\n        await this.unloadPlugin(name);\n      } catch (error) {\n        logger.error(`Error unloading plugin ${name} during shutdown:`, error);\n      }\n    }\n    \n    logger.info('Plugin Manager shutdown complete');\n  }\n}\n\nexport const pluginManager = new PluginManagerClass();","module.exports = require(\"crypto\");","module.exports = require(\"fs/promises\");","module.exports = require(\"path\");","module.exports = require(\"events\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DatabaseService = void 0;\nconst pg_1 = require(\"pg\");\nconst logger_1 = require(\"../utils/logger\");\nconst schema_1 = require(\"../database/schema\");\nclass DatabaseServiceClass {\n    constructor() {\n        this.pool = null;\n        this.db = null;\n        this.config = {\n            host: process.env.DB_HOST || 'localhost',\n            port: parseInt(process.env.DB_PORT || '5432'),\n            database: process.env.DB_NAME || 'blacktop_blackout',\n            username: process.env.DB_USER || 'postgres',\n            password: process.env.DB_PASSWORD || 'password',\n            ssl: process.env.DB_SSL === 'true',\n            maxConnections: parseInt(process.env.DB_MAX_CONNECTIONS || '20'),\n        };\n    }\n    async initialize() {\n        try {\n            logger_1.logger.info('Initializing database connection...');\n            // Create connection pool\n            this.pool = new pg_1.Pool({\n                host: this.config.host,\n                port: this.config.port,\n                database: this.config.database,\n                user: this.config.username,\n                password: this.config.password,\n                ssl: this.config.ssl ? { rejectUnauthorized: false } : false,\n                max: this.config.maxConnections,\n                idleTimeoutMillis: 30000,\n                connectionTimeoutMillis: 2000,\n            });\n            // Test connection\n            const client = await this.pool.connect();\n            const result = await client.query('SELECT NOW()');\n            client.release();\n            logger_1.logger.info('Database connection established successfully', {\n                timestamp: result.rows[0].now,\n                host: this.config.host,\n                database: this.config.database\n            });\n            // Create database schema\n            await this.createSchema();\n            // Insert sample data for development\n            if (process.env.NODE_ENV === 'development') {\n                await this.insertSampleData();\n            }\n            logger_1.logger.info('Database initialization completed');\n        }\n        catch (error) {\n            logger_1.logger.error('Failed to initialize database:', error);\n            throw error;\n        }\n    }\n    async createSchema() {\n        try {\n            logger_1.logger.info('Creating database schema...');\n            const client = await this.getClient();\n            await client.query(schema_1.createTablesSQL);\n            client.release();\n            logger_1.logger.info('Database schema created successfully');\n        }\n        catch (error) {\n            logger_1.logger.error('Failed to create database schema:', error);\n            throw error;\n        }\n    }\n    async insertSampleData() {\n        try {\n            logger_1.logger.info('Inserting sample data...');\n            const client = await this.getClient();\n            await client.query(schema_1.insertSampleDataSQL);\n            client.release();\n            logger_1.logger.info('Sample data inserted successfully');\n        }\n        catch (error) {\n            logger_1.logger.error('Failed to insert sample data:', error);\n            // Don't throw error for sample data insertion\n            logger_1.logger.warn('Continuing without sample data');\n        }\n    }\n    async getClient() {\n        if (!this.pool) {\n            throw new Error('Database not initialized');\n        }\n        return this.pool.connect();\n    }\n    getDrizzleInstance() {\n        if (!this.db) {\n            throw new Error('Database not initialized');\n        }\n        return this.db;\n    }\n    async query(text, params) {\n        if (!this.pool) {\n            throw new Error('Database not initialized');\n        }\n        const start = Date.now();\n        const client = await this.pool.connect();\n        try {\n            const result = await client.query(text, params);\n            const duration = Date.now() - start;\n            logger_1.logger.debug('Executed query', {\n                text,\n                duration: `${duration}ms`,\n                rows: result.rowCount\n            });\n            return result;\n        }\n        catch (error) {\n            logger_1.logger.error('Database query failed:', {\n                text,\n                error: error.message\n            });\n            throw error;\n        }\n        finally {\n            client.release();\n        }\n    }\n    async transaction(callback) {\n        if (!this.pool) {\n            throw new Error('Database not initialized');\n        }\n        const client = await this.pool.connect();\n        try {\n            await client.query('BEGIN');\n            const result = await callback(client);\n            await client.query('COMMIT');\n            return result;\n        }\n        catch (error) {\n            await client.query('ROLLBACK');\n            logger_1.logger.error('Transaction rolled back:', error);\n            throw error;\n        }\n        finally {\n            client.release();\n        }\n    }\n    async healthCheck() {\n        try {\n            if (!this.pool) {\n                return { status: 'disconnected', details: { error: 'Database not initialized' } };\n            }\n            const client = await this.pool.connect();\n            const start = Date.now();\n            const result = await client.query('SELECT NOW(), version()');\n            const responseTime = Date.now() - start;\n            client.release();\n            return {\n                status: 'healthy',\n                details: {\n                    responseTime: `${responseTime}ms`,\n                    timestamp: result.rows[0].now,\n                    version: result.rows[0].version,\n                    totalConnections: this.pool.totalCount,\n                    idleConnections: this.pool.idleCount,\n                    waitingClients: this.pool.waitingCount\n                }\n            };\n        }\n        catch (error) {\n            logger_1.logger.error('Database health check failed:', error);\n            return {\n                status: 'unhealthy',\n                details: { error: error.message }\n            };\n        }\n    }\n    async close() {\n        if (this.pool) {\n            logger_1.logger.info('Closing database connections...');\n            await this.pool.end();\n            this.pool = null;\n            this.db = null;\n            logger_1.logger.info('Database connections closed');\n        }\n    }\n}\nexports.DatabaseService = new DatabaseServiceClass();\n","import { Pool, PoolClient } from 'pg';\nimport { logger } from '../utils/logger';\nimport { createTablesSQL, insertSampleDataSQL } from '../database/schema';\n\ninterface DatabaseConfig {\n  host: string;\n  port: number;\n  database: string;\n  username: string;\n  password: string;\n  ssl?: boolean;\n  maxConnections?: number;\n}\n\nclass DatabaseServiceClass {\n  private pool: Pool | null = null;\n  private db: any = null;\n  private config: DatabaseConfig;\n\n  constructor() {\n    this.config = {\n      host: process.env.DB_HOST || 'localhost',\n      port: parseInt(process.env.DB_PORT || '5432'),\n      database: process.env.DB_NAME || 'blacktop_blackout',\n      username: process.env.DB_USER || 'postgres',\n      password: process.env.DB_PASSWORD || 'password',\n      ssl: process.env.DB_SSL === 'true',\n      maxConnections: parseInt(process.env.DB_MAX_CONNECTIONS || '20'),\n    };\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      logger.info('Initializing database connection...');\n      \n      // Create connection pool\n      this.pool = new Pool({\n        host: this.config.host,\n        port: this.config.port,\n        database: this.config.database,\n        user: this.config.username,\n        password: this.config.password,\n        ssl: this.config.ssl ? { rejectUnauthorized: false } : false,\n        max: this.config.maxConnections,\n        idleTimeoutMillis: 30000,\n        connectionTimeoutMillis: 2000,\n      });\n\n      // Test connection\n      const client = await this.pool.connect();\n      const result = await client.query('SELECT NOW()');\n      client.release();\n      \n      logger.info('Database connection established successfully', {\n        timestamp: result.rows[0].now,\n        host: this.config.host,\n        database: this.config.database\n      });\n\n      // Create database schema\n      await this.createSchema();\n\n      // Insert sample data for development\n      if (process.env.NODE_ENV === 'development') {\n        await this.insertSampleData();\n      }\n\n      logger.info('Database initialization completed');\n    } catch (error) {\n      logger.error('Failed to initialize database:', error);\n      throw error;\n    }\n  }\n\n  private async createSchema(): Promise<void> {\n    try {\n      logger.info('Creating database schema...');\n      const client = await this.getClient();\n      \n      await client.query(createTablesSQL);\n      \n      client.release();\n      logger.info('Database schema created successfully');\n    } catch (error) {\n      logger.error('Failed to create database schema:', error);\n      throw error;\n    }\n  }\n\n  private async insertSampleData(): Promise<void> {\n    try {\n      logger.info('Inserting sample data...');\n      const client = await this.getClient();\n      \n      await client.query(insertSampleDataSQL);\n      \n      client.release();\n      logger.info('Sample data inserted successfully');\n    } catch (error) {\n      logger.error('Failed to insert sample data:', error);\n      // Don't throw error for sample data insertion\n      logger.warn('Continuing without sample data');\n    }\n  }\n\n  async getClient(): Promise<PoolClient> {\n    if (!this.pool) {\n      throw new Error('Database not initialized');\n    }\n    return this.pool.connect();\n  }\n\n  getDrizzleInstance() {\n    if (!this.db) {\n      throw new Error('Database not initialized');\n    }\n    return this.db;\n  }\n\n  async query(text: string, params?: any[]): Promise<any> {\n    if (!this.pool) {\n      throw new Error('Database not initialized');\n    }\n    \n    const start = Date.now();\n    const client = await this.pool.connect();\n    \n    try {\n      const result = await client.query(text, params);\n      const duration = Date.now() - start;\n      \n      logger.debug('Executed query', {\n        text,\n        duration: `${duration}ms`,\n        rows: result.rowCount\n      });\n      \n      return result;\n    } catch (error) {\n      logger.error('Database query failed:', {\n        text,\n        error: error.message\n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async transaction<T>(callback: (client: PoolClient) => Promise<T>): Promise<T> {\n    if (!this.pool) {\n      throw new Error('Database not initialized');\n    }\n\n    const client = await this.pool.connect();\n    \n    try {\n      await client.query('BEGIN');\n      const result = await callback(client);\n      await client.query('COMMIT');\n      return result;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      logger.error('Transaction rolled back:', error);\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async healthCheck(): Promise<{ status: string; details: any }> {\n    try {\n      if (!this.pool) {\n        return { status: 'disconnected', details: { error: 'Database not initialized' } };\n      }\n\n      const client = await this.pool.connect();\n      const start = Date.now();\n      const result = await client.query('SELECT NOW(), version()');\n      const responseTime = Date.now() - start;\n      client.release();\n\n      return {\n        status: 'healthy',\n        details: {\n          responseTime: `${responseTime}ms`,\n          timestamp: result.rows[0].now,\n          version: result.rows[0].version,\n          totalConnections: this.pool.totalCount,\n          idleConnections: this.pool.idleCount,\n          waitingClients: this.pool.waitingCount\n        }\n      };\n    } catch (error) {\n      logger.error('Database health check failed:', error);\n      return {\n        status: 'unhealthy',\n        details: { error: error.message }\n      };\n    }\n  }\n\n  async close(): Promise<void> {\n    if (this.pool) {\n      logger.info('Closing database connections...');\n      await this.pool.end();\n      this.pool = null;\n      this.db = null;\n      logger.info('Database connections closed');\n    }\n  }\n}\n\nexport const DatabaseService = new DatabaseServiceClass();","module.exports = require(\"pg\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dropTablesSQL = exports.insertSampleDataSQL = exports.createTablesSQL = void 0;\n// Database Schema for Blacktop Blackout OverWatch-Ops System\nexports.createTablesSQL = `\n-- Enable PostGIS extension\nCREATE EXTENSION IF NOT EXISTS postgis;\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n-- Users and Authentication\nCREATE TABLE IF NOT EXISTS users (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    name VARCHAR(255) NOT NULL,\n    role VARCHAR(50) NOT NULL DEFAULT 'operator' CHECK (role IN ('admin', 'manager', 'operator')),\n    company_id UUID,\n    active BOOLEAN DEFAULT true,\n    last_login TIMESTAMP,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Companies/Organizations\nCREATE TABLE IF NOT EXISTS companies (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name VARCHAR(255) NOT NULL,\n    address TEXT,\n    phone VARCHAR(50),\n    email VARCHAR(255),\n    business_license VARCHAR(255),\n    settings JSONB DEFAULT '{}',\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Employees Management\nCREATE TABLE IF NOT EXISTS employees (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    user_id UUID REFERENCES users(id) ON DELETE SET NULL,\n    employee_number VARCHAR(50),\n    name VARCHAR(255) NOT NULL,\n    position VARCHAR(100),\n    hire_date DATE,\n    hourly_rate DECIMAL(10,2),\n    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'terminated')),\n    phone VARCHAR(50),\n    email VARCHAR(255),\n    address TEXT,\n    emergency_contact JSONB,\n    performance_data JSONB DEFAULT '{}',\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Vehicles and Equipment\nCREATE TABLE IF NOT EXISTS vehicles (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    name VARCHAR(255) NOT NULL,\n    type VARCHAR(100), -- truck, trailer, equipment\n    make VARCHAR(100),\n    model VARCHAR(100),\n    year INTEGER,\n    vin VARCHAR(50),\n    license_plate VARCHAR(20),\n    registration_expires DATE,\n    insurance_expires DATE,\n    current_mileage DECIMAL(10,2),\n    fuel_capacity DECIMAL(10,2),\n    gvwr DECIMAL(10,2), -- Gross Vehicle Weight Rating\n    curb_weight DECIMAL(10,2),\n    specifications JSONB DEFAULT '{}',\n    maintenance_log JSONB DEFAULT '[]',\n    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'maintenance', 'inactive')),\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Equipment (tools, machines, etc.)\nCREATE TABLE IF NOT EXISTS equipment (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    vehicle_id UUID REFERENCES vehicles(id) ON DELETE SET NULL,\n    name VARCHAR(255) NOT NULL,\n    type VARCHAR(100), -- sealcoating_tank, crack_machine, blower, etc.\n    make VARCHAR(100),\n    model VARCHAR(100),\n    serial_number VARCHAR(100),\n    capacity DECIMAL(10,2),\n    weight DECIMAL(10,2),\n    specifications JSONB DEFAULT '{}',\n    maintenance_schedule JSONB DEFAULT '{}',\n    usage_hours DECIMAL(10,2) DEFAULT 0,\n    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'maintenance', 'inactive')),\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Materials and Supplies\nCREATE TABLE IF NOT EXISTS materials (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    name VARCHAR(255) NOT NULL,\n    category VARCHAR(100), -- sealer, sand, crack_filler, etc.\n    supplier VARCHAR(255),\n    unit_type VARCHAR(50), -- gallon, bag, box, tank\n    current_cost DECIMAL(10,2),\n    last_cost_update TIMESTAMP,\n    specifications JSONB DEFAULT '{}',\n    mixing_ratios JSONB DEFAULT '{}',\n    coverage_rates JSONB DEFAULT '{}',\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Inventory tracking\nCREATE TABLE IF NOT EXISTS inventory (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    material_id UUID REFERENCES materials(id) ON DELETE CASCADE,\n    current_stock DECIMAL(10,2) DEFAULT 0,\n    minimum_stock DECIMAL(10,2) DEFAULT 0,\n    location VARCHAR(255),\n    last_restocked TIMESTAMP,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- GPS Tracking and Location Data\nCREATE TABLE IF NOT EXISTS location_tracking (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    employee_id UUID REFERENCES employees(id) ON DELETE CASCADE,\n    vehicle_id UUID REFERENCES vehicles(id) ON DELETE SET NULL,\n    location GEOGRAPHY(POINT, 4326) NOT NULL,\n    accuracy DECIMAL(10,2),\n    speed DECIMAL(5,2),\n    heading DECIMAL(5,2),\n    activity VARCHAR(50), -- driving, walking, stationary, work\n    battery_level INTEGER,\n    timestamp TIMESTAMP DEFAULT NOW(),\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Geofences for job sites and boundaries\nCREATE TABLE IF NOT EXISTS geofences (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    name VARCHAR(255) NOT NULL,\n    type VARCHAR(50) DEFAULT 'work_site', -- work_site, office, supplier, restricted\n    boundary GEOGRAPHY(POLYGON, 4326) NOT NULL,\n    radius DECIMAL(10,2), -- for circular geofences\n    active BOOLEAN DEFAULT true,\n    settings JSONB DEFAULT '{}',\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Time Tracking and Attendance\nCREATE TABLE IF NOT EXISTS time_entries (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    employee_id UUID REFERENCES employees(id) ON DELETE CASCADE,\n    clock_in TIMESTAMP NOT NULL,\n    clock_out TIMESTAMP,\n    clock_in_location GEOGRAPHY(POINT, 4326),\n    clock_out_location GEOGRAPHY(POINT, 4326),\n    total_hours DECIMAL(5,2),\n    break_time DECIMAL(5,2) DEFAULT 0,\n    overtime_hours DECIMAL(5,2) DEFAULT 0,\n    wage_rate DECIMAL(10,2),\n    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'completed', 'adjusted')),\n    notes TEXT,\n    auto_generated BOOLEAN DEFAULT false,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Cost Tracking\nCREATE TABLE IF NOT EXISTS cost_entries (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    employee_id UUID REFERENCES employees(id) ON DELETE SET NULL,\n    vehicle_id UUID REFERENCES vehicles(id) ON DELETE SET NULL,\n    category VARCHAR(100) NOT NULL, -- labor, materials, fuel, equipment\n    subcategory VARCHAR(100),\n    amount DECIMAL(10,2) NOT NULL,\n    quantity DECIMAL(10,2),\n    unit_cost DECIMAL(10,2),\n    description TEXT,\n    date DATE NOT NULL,\n    receipt_image TEXT, -- file path or URL\n    receipt_data JSONB, -- OCR extracted data\n    project_id UUID, -- for future project tracking\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Weather Data\nCREATE TABLE IF NOT EXISTS weather_data (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    location GEOGRAPHY(POINT, 4326) NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    temperature DECIMAL(5,2),\n    feels_like DECIMAL(5,2),\n    humidity INTEGER,\n    wind_speed DECIMAL(5,2),\n    wind_direction INTEGER,\n    pressure DECIMAL(8,2),\n    visibility DECIMAL(5,2),\n    uv_index DECIMAL(3,1),\n    conditions VARCHAR(100),\n    precipitation DECIMAL(5,2),\n    forecast_data JSONB,\n    source VARCHAR(100), -- API source\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- PavementScan Pro Data\nCREATE TABLE IF NOT EXISTS pavement_scans (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    employee_id UUID REFERENCES employees(id) ON DELETE SET NULL,\n    scan_location GEOGRAPHY(POINT, 4326) NOT NULL,\n    scan_area GEOGRAPHY(POLYGON, 4326),\n    total_area DECIMAL(10,2), -- square feet\n    perimeter_length DECIMAL(10,2), -- feet\n    scan_date TIMESTAMP DEFAULT NOW(),\n    device_info JSONB, -- camera, LiDAR, etc.\n    model_file_path TEXT, -- 3D model file location\n    status VARCHAR(50) DEFAULT 'processing' CHECK (status IN ('processing', 'completed', 'failed')),\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Defect Detection Results\nCREATE TABLE IF NOT EXISTS defects (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    scan_id UUID REFERENCES pavement_scans(id) ON DELETE CASCADE,\n    defect_type VARCHAR(100) NOT NULL, -- crack, pothole, alligator, water_pooling\n    severity VARCHAR(50), -- low, medium, high, critical\n    location GEOGRAPHY(POINT, 4326) NOT NULL,\n    area GEOGRAPHY(POLYGON, 4326),\n    measurements JSONB, -- length, width, depth, area\n    confidence_score DECIMAL(3,2), -- AI confidence 0-1\n    visual_markers JSONB, -- color coding, highlighting data\n    repair_priority INTEGER DEFAULT 3, -- 1-5 scale\n    estimated_cost DECIMAL(10,2),\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Reports and Documents\nCREATE TABLE IF NOT EXISTS reports (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    scan_id UUID REFERENCES pavement_scans(id) ON DELETE SET NULL,\n    employee_id UUID REFERENCES employees(id) ON DELETE SET NULL,\n    report_type VARCHAR(100) NOT NULL, -- pavement_analysis, cost_summary, daily_activity\n    title VARCHAR(255) NOT NULL,\n    file_path TEXT, -- PDF, PNG, DXF, GeoJSON\n    file_type VARCHAR(20),\n    file_size BIGINT,\n    metadata JSONB DEFAULT '{}',\n    generated_at TIMESTAMP DEFAULT NOW(),\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Plugin Registry\nCREATE TABLE IF NOT EXISTS plugins (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name VARCHAR(255) UNIQUE NOT NULL,\n    version VARCHAR(50) NOT NULL,\n    description TEXT,\n    author VARCHAR(255),\n    plugin_type VARCHAR(50) DEFAULT 'backend', -- backend, frontend, hybrid\n    file_path TEXT,\n    checksum VARCHAR(64),\n    signature TEXT,\n    permissions JSONB DEFAULT '[]',\n    dependencies JSONB DEFAULT '[]',\n    status VARCHAR(50) DEFAULT 'inactive' CHECK (status IN ('active', 'inactive', 'error')),\n    installed_at TIMESTAMP DEFAULT NOW(),\n    last_error TEXT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- System Settings and Configuration\nCREATE TABLE IF NOT EXISTS system_settings (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    setting_key VARCHAR(255) NOT NULL,\n    setting_value JSONB,\n    setting_type VARCHAR(50) DEFAULT 'general', -- general, security, integration\n    description TEXT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW(),\n    UNIQUE(company_id, setting_key)\n);\n\n-- Audit Log for Security and Compliance\nCREATE TABLE IF NOT EXISTS audit_log (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    user_id UUID REFERENCES users(id) ON DELETE SET NULL,\n    action VARCHAR(255) NOT NULL,\n    resource_type VARCHAR(100),\n    resource_id UUID,\n    old_values JSONB,\n    new_values JSONB,\n    ip_address INET,\n    user_agent TEXT,\n    timestamp TIMESTAMP DEFAULT NOW()\n);\n\n-- Indexes for Performance\nCREATE INDEX IF NOT EXISTS idx_users_email ON users(email);\nCREATE INDEX IF NOT EXISTS idx_users_company ON users(company_id);\nCREATE INDEX IF NOT EXISTS idx_employees_company ON employees(company_id);\nCREATE INDEX IF NOT EXISTS idx_vehicles_company ON vehicles(company_id);\nCREATE INDEX IF NOT EXISTS idx_location_tracking_employee ON location_tracking(employee_id);\nCREATE INDEX IF NOT EXISTS idx_location_tracking_timestamp ON location_tracking(timestamp);\nCREATE INDEX IF NOT EXISTS idx_location_tracking_location ON location_tracking USING GIST(location);\nCREATE INDEX IF NOT EXISTS idx_geofences_boundary ON geofences USING GIST(boundary);\nCREATE INDEX IF NOT EXISTS idx_time_entries_employee ON time_entries(employee_id);\nCREATE INDEX IF NOT EXISTS idx_time_entries_date ON time_entries(clock_in);\nCREATE INDEX IF NOT EXISTS idx_cost_entries_company ON cost_entries(company_id);\nCREATE INDEX IF NOT EXISTS idx_cost_entries_date ON cost_entries(date);\nCREATE INDEX IF NOT EXISTS idx_pavement_scans_location ON pavement_scans USING GIST(scan_location);\nCREATE INDEX IF NOT EXISTS idx_defects_scan ON defects(scan_id);\nCREATE INDEX IF NOT EXISTS idx_defects_location ON defects USING GIST(location);\nCREATE INDEX IF NOT EXISTS idx_audit_log_company ON audit_log(company_id);\nCREATE INDEX IF NOT EXISTS idx_audit_log_timestamp ON audit_log(timestamp);\n\n-- Add foreign key constraints\nALTER TABLE users ADD CONSTRAINT fk_users_company \n    FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE SET NULL;\n`;\n// Sample data for development\nexports.insertSampleDataSQL = `\n-- Insert sample company\nINSERT INTO companies (id, name, address, phone, email) VALUES \n    ('550e8400-e29b-41d4-a716-446655440001', \n     'Blacktop Solutions LLC', \n     '337 Ayers Orchard Road, Stuart, VA 24171', \n     '(276) 555-0123', \n     'info@blacktopsolutions.com')\nON CONFLICT (id) DO NOTHING;\n\n-- Insert sample admin user\nINSERT INTO users (id, email, password_hash, name, role, company_id) VALUES \n    ('550e8400-e29b-41d4-a716-446655440002',\n     'admin@blacktopsolutions.com',\n     '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj3pk/VpM4w2', -- password: admin123\n     'System Administrator',\n     'admin',\n     '550e8400-e29b-41d4-a716-446655440001')\nON CONFLICT (email) DO NOTHING;\n\n-- Insert sample materials from SealMaster\nINSERT INTO materials (company_id, name, category, supplier, unit_type, current_cost) VALUES \n    ('550e8400-e29b-41d4-a716-446655440001', 'SealMaster PMM Asphalt Sealer Concentrate', 'sealer', 'SealMaster', 'gallon', 3.79),\n    ('550e8400-e29b-41d4-a716-446655440001', 'Sand 50lb bag', 'aggregate', 'SealMaster', 'bag', 10.00),\n    ('550e8400-e29b-41d4-a716-446655440001', 'Prep Seal', 'primer', 'SealMaster', 'bucket', 50.00),\n    ('550e8400-e29b-41d4-a716-446655440001', 'Fast Dry', 'additive', 'SealMaster', 'bucket', 50.00),\n    ('550e8400-e29b-41d4-a716-446655440001', 'CrackMaster Crackfiller Parking Lot LP', 'crack_filler', 'SealMaster', 'box', 44.95),\n    ('550e8400-e29b-41d4-a716-446655440001', 'Propane Tank', 'fuel', 'Local Supplier', 'tank', 10.00)\nON CONFLICT DO NOTHING;\n\n-- Insert sample vehicle (1978 Chevy C30)\nINSERT INTO vehicles (company_id, name, type, make, model, year, gvwr, curb_weight, specifications) VALUES \n    ('550e8400-e29b-41d4-a716-446655440001',\n     '1978 Chevy C30 Work Truck',\n     'truck',\n     'Chevrolet',\n     'C30 Custom Deluxe',\n     1978,\n     14000.00, -- GVWR\n     4300.00,  -- Curb weight\n     '{\"engine\": \"350\", \"transmission\": \"3-speed manual\", \"fuel_capacity\": 20}'::jsonb)\nON CONFLICT DO NOTHING;\n\n-- Insert SealMaster SK 550 tank\nINSERT INTO equipment (company_id, name, type, make, model, capacity, weight, specifications) VALUES \n    ('550e8400-e29b-41d4-a716-446655440001',\n     'SealMaster SK 550 Tank Sealing Machine',\n     'sealcoating_tank',\n     'SealMaster',\n     'SK 550',\n     550.00, -- gallon capacity\n     1865.00, -- empty weight\n     '{\"unit_type\": \"skid\", \"material_weight_per_gallon\": 10, \"full_weight\": 7365}'::jsonb)\nON CONFLICT DO NOTHING;\n\n-- Insert office geofence\nINSERT INTO geofences (company_id, name, type, boundary) VALUES \n    ('550e8400-e29b-41d4-a716-446655440001',\n     'Main Office',\n     'office',\n     ST_GeogFromText('POLYGON((-80.2741 36.5962, -80.2738 36.5962, -80.2738 36.5965, -80.2741 36.5965, -80.2741 36.5962))'))\nON CONFLICT DO NOTHING;\n`;\nexports.dropTablesSQL = `\nDROP TABLE IF EXISTS audit_log CASCADE;\nDROP TABLE IF EXISTS system_settings CASCADE;\nDROP TABLE IF EXISTS plugins CASCADE;\nDROP TABLE IF EXISTS reports CASCADE;\nDROP TABLE IF EXISTS defects CASCADE;\nDROP TABLE IF EXISTS pavement_scans CASCADE;\nDROP TABLE IF EXISTS weather_data CASCADE;\nDROP TABLE IF EXISTS cost_entries CASCADE;\nDROP TABLE IF EXISTS time_entries CASCADE;\nDROP TABLE IF EXISTS geofences CASCADE;\nDROP TABLE IF EXISTS location_tracking CASCADE;\nDROP TABLE IF EXISTS inventory CASCADE;\nDROP TABLE IF EXISTS materials CASCADE;\nDROP TABLE IF EXISTS equipment CASCADE;\nDROP TABLE IF EXISTS vehicles CASCADE;\nDROP TABLE IF EXISTS employees CASCADE;\nDROP TABLE IF EXISTS companies CASCADE;\nDROP TABLE IF EXISTS users CASCADE;\n`;\n","// Database Schema for Blacktop Blackout OverWatch-Ops System\nexport const createTablesSQL = `\n-- Enable PostGIS extension\nCREATE EXTENSION IF NOT EXISTS postgis;\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n-- Users and Authentication\nCREATE TABLE IF NOT EXISTS users (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    name VARCHAR(255) NOT NULL,\n    role VARCHAR(50) NOT NULL DEFAULT 'operator' CHECK (role IN ('admin', 'manager', 'operator')),\n    company_id UUID,\n    active BOOLEAN DEFAULT true,\n    last_login TIMESTAMP,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Companies/Organizations\nCREATE TABLE IF NOT EXISTS companies (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name VARCHAR(255) NOT NULL,\n    address TEXT,\n    phone VARCHAR(50),\n    email VARCHAR(255),\n    business_license VARCHAR(255),\n    settings JSONB DEFAULT '{}',\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Employees Management\nCREATE TABLE IF NOT EXISTS employees (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    user_id UUID REFERENCES users(id) ON DELETE SET NULL,\n    employee_number VARCHAR(50),\n    name VARCHAR(255) NOT NULL,\n    position VARCHAR(100),\n    hire_date DATE,\n    hourly_rate DECIMAL(10,2),\n    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'terminated')),\n    phone VARCHAR(50),\n    email VARCHAR(255),\n    address TEXT,\n    emergency_contact JSONB,\n    performance_data JSONB DEFAULT '{}',\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Vehicles and Equipment\nCREATE TABLE IF NOT EXISTS vehicles (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    name VARCHAR(255) NOT NULL,\n    type VARCHAR(100), -- truck, trailer, equipment\n    make VARCHAR(100),\n    model VARCHAR(100),\n    year INTEGER,\n    vin VARCHAR(50),\n    license_plate VARCHAR(20),\n    registration_expires DATE,\n    insurance_expires DATE,\n    current_mileage DECIMAL(10,2),\n    fuel_capacity DECIMAL(10,2),\n    gvwr DECIMAL(10,2), -- Gross Vehicle Weight Rating\n    curb_weight DECIMAL(10,2),\n    specifications JSONB DEFAULT '{}',\n    maintenance_log JSONB DEFAULT '[]',\n    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'maintenance', 'inactive')),\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Equipment (tools, machines, etc.)\nCREATE TABLE IF NOT EXISTS equipment (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    vehicle_id UUID REFERENCES vehicles(id) ON DELETE SET NULL,\n    name VARCHAR(255) NOT NULL,\n    type VARCHAR(100), -- sealcoating_tank, crack_machine, blower, etc.\n    make VARCHAR(100),\n    model VARCHAR(100),\n    serial_number VARCHAR(100),\n    capacity DECIMAL(10,2),\n    weight DECIMAL(10,2),\n    specifications JSONB DEFAULT '{}',\n    maintenance_schedule JSONB DEFAULT '{}',\n    usage_hours DECIMAL(10,2) DEFAULT 0,\n    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'maintenance', 'inactive')),\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Materials and Supplies\nCREATE TABLE IF NOT EXISTS materials (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    name VARCHAR(255) NOT NULL,\n    category VARCHAR(100), -- sealer, sand, crack_filler, etc.\n    supplier VARCHAR(255),\n    unit_type VARCHAR(50), -- gallon, bag, box, tank\n    current_cost DECIMAL(10,2),\n    last_cost_update TIMESTAMP,\n    specifications JSONB DEFAULT '{}',\n    mixing_ratios JSONB DEFAULT '{}',\n    coverage_rates JSONB DEFAULT '{}',\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Inventory tracking\nCREATE TABLE IF NOT EXISTS inventory (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    material_id UUID REFERENCES materials(id) ON DELETE CASCADE,\n    current_stock DECIMAL(10,2) DEFAULT 0,\n    minimum_stock DECIMAL(10,2) DEFAULT 0,\n    location VARCHAR(255),\n    last_restocked TIMESTAMP,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- GPS Tracking and Location Data\nCREATE TABLE IF NOT EXISTS location_tracking (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    employee_id UUID REFERENCES employees(id) ON DELETE CASCADE,\n    vehicle_id UUID REFERENCES vehicles(id) ON DELETE SET NULL,\n    location GEOGRAPHY(POINT, 4326) NOT NULL,\n    accuracy DECIMAL(10,2),\n    speed DECIMAL(5,2),\n    heading DECIMAL(5,2),\n    activity VARCHAR(50), -- driving, walking, stationary, work\n    battery_level INTEGER,\n    timestamp TIMESTAMP DEFAULT NOW(),\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Geofences for job sites and boundaries\nCREATE TABLE IF NOT EXISTS geofences (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    name VARCHAR(255) NOT NULL,\n    type VARCHAR(50) DEFAULT 'work_site', -- work_site, office, supplier, restricted\n    boundary GEOGRAPHY(POLYGON, 4326) NOT NULL,\n    radius DECIMAL(10,2), -- for circular geofences\n    active BOOLEAN DEFAULT true,\n    settings JSONB DEFAULT '{}',\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Time Tracking and Attendance\nCREATE TABLE IF NOT EXISTS time_entries (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    employee_id UUID REFERENCES employees(id) ON DELETE CASCADE,\n    clock_in TIMESTAMP NOT NULL,\n    clock_out TIMESTAMP,\n    clock_in_location GEOGRAPHY(POINT, 4326),\n    clock_out_location GEOGRAPHY(POINT, 4326),\n    total_hours DECIMAL(5,2),\n    break_time DECIMAL(5,2) DEFAULT 0,\n    overtime_hours DECIMAL(5,2) DEFAULT 0,\n    wage_rate DECIMAL(10,2),\n    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'completed', 'adjusted')),\n    notes TEXT,\n    auto_generated BOOLEAN DEFAULT false,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Cost Tracking\nCREATE TABLE IF NOT EXISTS cost_entries (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    employee_id UUID REFERENCES employees(id) ON DELETE SET NULL,\n    vehicle_id UUID REFERENCES vehicles(id) ON DELETE SET NULL,\n    category VARCHAR(100) NOT NULL, -- labor, materials, fuel, equipment\n    subcategory VARCHAR(100),\n    amount DECIMAL(10,2) NOT NULL,\n    quantity DECIMAL(10,2),\n    unit_cost DECIMAL(10,2),\n    description TEXT,\n    date DATE NOT NULL,\n    receipt_image TEXT, -- file path or URL\n    receipt_data JSONB, -- OCR extracted data\n    project_id UUID, -- for future project tracking\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Weather Data\nCREATE TABLE IF NOT EXISTS weather_data (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    location GEOGRAPHY(POINT, 4326) NOT NULL,\n    timestamp TIMESTAMP NOT NULL,\n    temperature DECIMAL(5,2),\n    feels_like DECIMAL(5,2),\n    humidity INTEGER,\n    wind_speed DECIMAL(5,2),\n    wind_direction INTEGER,\n    pressure DECIMAL(8,2),\n    visibility DECIMAL(5,2),\n    uv_index DECIMAL(3,1),\n    conditions VARCHAR(100),\n    precipitation DECIMAL(5,2),\n    forecast_data JSONB,\n    source VARCHAR(100), -- API source\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- PavementScan Pro Data\nCREATE TABLE IF NOT EXISTS pavement_scans (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    employee_id UUID REFERENCES employees(id) ON DELETE SET NULL,\n    scan_location GEOGRAPHY(POINT, 4326) NOT NULL,\n    scan_area GEOGRAPHY(POLYGON, 4326),\n    total_area DECIMAL(10,2), -- square feet\n    perimeter_length DECIMAL(10,2), -- feet\n    scan_date TIMESTAMP DEFAULT NOW(),\n    device_info JSONB, -- camera, LiDAR, etc.\n    model_file_path TEXT, -- 3D model file location\n    status VARCHAR(50) DEFAULT 'processing' CHECK (status IN ('processing', 'completed', 'failed')),\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Defect Detection Results\nCREATE TABLE IF NOT EXISTS defects (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    scan_id UUID REFERENCES pavement_scans(id) ON DELETE CASCADE,\n    defect_type VARCHAR(100) NOT NULL, -- crack, pothole, alligator, water_pooling\n    severity VARCHAR(50), -- low, medium, high, critical\n    location GEOGRAPHY(POINT, 4326) NOT NULL,\n    area GEOGRAPHY(POLYGON, 4326),\n    measurements JSONB, -- length, width, depth, area\n    confidence_score DECIMAL(3,2), -- AI confidence 0-1\n    visual_markers JSONB, -- color coding, highlighting data\n    repair_priority INTEGER DEFAULT 3, -- 1-5 scale\n    estimated_cost DECIMAL(10,2),\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Reports and Documents\nCREATE TABLE IF NOT EXISTS reports (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    scan_id UUID REFERENCES pavement_scans(id) ON DELETE SET NULL,\n    employee_id UUID REFERENCES employees(id) ON DELETE SET NULL,\n    report_type VARCHAR(100) NOT NULL, -- pavement_analysis, cost_summary, daily_activity\n    title VARCHAR(255) NOT NULL,\n    file_path TEXT, -- PDF, PNG, DXF, GeoJSON\n    file_type VARCHAR(20),\n    file_size BIGINT,\n    metadata JSONB DEFAULT '{}',\n    generated_at TIMESTAMP DEFAULT NOW(),\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Plugin Registry\nCREATE TABLE IF NOT EXISTS plugins (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name VARCHAR(255) UNIQUE NOT NULL,\n    version VARCHAR(50) NOT NULL,\n    description TEXT,\n    author VARCHAR(255),\n    plugin_type VARCHAR(50) DEFAULT 'backend', -- backend, frontend, hybrid\n    file_path TEXT,\n    checksum VARCHAR(64),\n    signature TEXT,\n    permissions JSONB DEFAULT '[]',\n    dependencies JSONB DEFAULT '[]',\n    status VARCHAR(50) DEFAULT 'inactive' CHECK (status IN ('active', 'inactive', 'error')),\n    installed_at TIMESTAMP DEFAULT NOW(),\n    last_error TEXT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- System Settings and Configuration\nCREATE TABLE IF NOT EXISTS system_settings (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    setting_key VARCHAR(255) NOT NULL,\n    setting_value JSONB,\n    setting_type VARCHAR(50) DEFAULT 'general', -- general, security, integration\n    description TEXT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW(),\n    UNIQUE(company_id, setting_key)\n);\n\n-- Audit Log for Security and Compliance\nCREATE TABLE IF NOT EXISTS audit_log (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    company_id UUID REFERENCES companies(id) ON DELETE CASCADE,\n    user_id UUID REFERENCES users(id) ON DELETE SET NULL,\n    action VARCHAR(255) NOT NULL,\n    resource_type VARCHAR(100),\n    resource_id UUID,\n    old_values JSONB,\n    new_values JSONB,\n    ip_address INET,\n    user_agent TEXT,\n    timestamp TIMESTAMP DEFAULT NOW()\n);\n\n-- Indexes for Performance\nCREATE INDEX IF NOT EXISTS idx_users_email ON users(email);\nCREATE INDEX IF NOT EXISTS idx_users_company ON users(company_id);\nCREATE INDEX IF NOT EXISTS idx_employees_company ON employees(company_id);\nCREATE INDEX IF NOT EXISTS idx_vehicles_company ON vehicles(company_id);\nCREATE INDEX IF NOT EXISTS idx_location_tracking_employee ON location_tracking(employee_id);\nCREATE INDEX IF NOT EXISTS idx_location_tracking_timestamp ON location_tracking(timestamp);\nCREATE INDEX IF NOT EXISTS idx_location_tracking_location ON location_tracking USING GIST(location);\nCREATE INDEX IF NOT EXISTS idx_geofences_boundary ON geofences USING GIST(boundary);\nCREATE INDEX IF NOT EXISTS idx_time_entries_employee ON time_entries(employee_id);\nCREATE INDEX IF NOT EXISTS idx_time_entries_date ON time_entries(clock_in);\nCREATE INDEX IF NOT EXISTS idx_cost_entries_company ON cost_entries(company_id);\nCREATE INDEX IF NOT EXISTS idx_cost_entries_date ON cost_entries(date);\nCREATE INDEX IF NOT EXISTS idx_pavement_scans_location ON pavement_scans USING GIST(scan_location);\nCREATE INDEX IF NOT EXISTS idx_defects_scan ON defects(scan_id);\nCREATE INDEX IF NOT EXISTS idx_defects_location ON defects USING GIST(location);\nCREATE INDEX IF NOT EXISTS idx_audit_log_company ON audit_log(company_id);\nCREATE INDEX IF NOT EXISTS idx_audit_log_timestamp ON audit_log(timestamp);\n\n-- Add foreign key constraints\nALTER TABLE users ADD CONSTRAINT fk_users_company \n    FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE SET NULL;\n`;\n\n// Sample data for development\nexport const insertSampleDataSQL = `\n-- Insert sample company\nINSERT INTO companies (id, name, address, phone, email) VALUES \n    ('550e8400-e29b-41d4-a716-446655440001', \n     'Blacktop Solutions LLC', \n     '337 Ayers Orchard Road, Stuart, VA 24171', \n     '(276) 555-0123', \n     'info@blacktopsolutions.com')\nON CONFLICT (id) DO NOTHING;\n\n-- Insert sample admin user\nINSERT INTO users (id, email, password_hash, name, role, company_id) VALUES \n    ('550e8400-e29b-41d4-a716-446655440002',\n     'admin@blacktopsolutions.com',\n     '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj3pk/VpM4w2', -- password: admin123\n     'System Administrator',\n     'admin',\n     '550e8400-e29b-41d4-a716-446655440001')\nON CONFLICT (email) DO NOTHING;\n\n-- Insert sample materials from SealMaster\nINSERT INTO materials (company_id, name, category, supplier, unit_type, current_cost) VALUES \n    ('550e8400-e29b-41d4-a716-446655440001', 'SealMaster PMM Asphalt Sealer Concentrate', 'sealer', 'SealMaster', 'gallon', 3.79),\n    ('550e8400-e29b-41d4-a716-446655440001', 'Sand 50lb bag', 'aggregate', 'SealMaster', 'bag', 10.00),\n    ('550e8400-e29b-41d4-a716-446655440001', 'Prep Seal', 'primer', 'SealMaster', 'bucket', 50.00),\n    ('550e8400-e29b-41d4-a716-446655440001', 'Fast Dry', 'additive', 'SealMaster', 'bucket', 50.00),\n    ('550e8400-e29b-41d4-a716-446655440001', 'CrackMaster Crackfiller Parking Lot LP', 'crack_filler', 'SealMaster', 'box', 44.95),\n    ('550e8400-e29b-41d4-a716-446655440001', 'Propane Tank', 'fuel', 'Local Supplier', 'tank', 10.00)\nON CONFLICT DO NOTHING;\n\n-- Insert sample vehicle (1978 Chevy C30)\nINSERT INTO vehicles (company_id, name, type, make, model, year, gvwr, curb_weight, specifications) VALUES \n    ('550e8400-e29b-41d4-a716-446655440001',\n     '1978 Chevy C30 Work Truck',\n     'truck',\n     'Chevrolet',\n     'C30 Custom Deluxe',\n     1978,\n     14000.00, -- GVWR\n     4300.00,  -- Curb weight\n     '{\"engine\": \"350\", \"transmission\": \"3-speed manual\", \"fuel_capacity\": 20}'::jsonb)\nON CONFLICT DO NOTHING;\n\n-- Insert SealMaster SK 550 tank\nINSERT INTO equipment (company_id, name, type, make, model, capacity, weight, specifications) VALUES \n    ('550e8400-e29b-41d4-a716-446655440001',\n     'SealMaster SK 550 Tank Sealing Machine',\n     'sealcoating_tank',\n     'SealMaster',\n     'SK 550',\n     550.00, -- gallon capacity\n     1865.00, -- empty weight\n     '{\"unit_type\": \"skid\", \"material_weight_per_gallon\": 10, \"full_weight\": 7365}'::jsonb)\nON CONFLICT DO NOTHING;\n\n-- Insert office geofence\nINSERT INTO geofences (company_id, name, type, boundary) VALUES \n    ('550e8400-e29b-41d4-a716-446655440001',\n     'Main Office',\n     'office',\n     ST_GeogFromText('POLYGON((-80.2741 36.5962, -80.2738 36.5962, -80.2738 36.5965, -80.2741 36.5965, -80.2741 36.5962))'))\nON CONFLICT DO NOTHING;\n`;\n\nexport const dropTablesSQL = `\nDROP TABLE IF EXISTS audit_log CASCADE;\nDROP TABLE IF EXISTS system_settings CASCADE;\nDROP TABLE IF EXISTS plugins CASCADE;\nDROP TABLE IF EXISTS reports CASCADE;\nDROP TABLE IF EXISTS defects CASCADE;\nDROP TABLE IF EXISTS pavement_scans CASCADE;\nDROP TABLE IF EXISTS weather_data CASCADE;\nDROP TABLE IF EXISTS cost_entries CASCADE;\nDROP TABLE IF EXISTS time_entries CASCADE;\nDROP TABLE IF EXISTS geofences CASCADE;\nDROP TABLE IF EXISTS location_tracking CASCADE;\nDROP TABLE IF EXISTS inventory CASCADE;\nDROP TABLE IF EXISTS materials CASCADE;\nDROP TABLE IF EXISTS equipment CASCADE;\nDROP TABLE IF EXISTS vehicles CASCADE;\nDROP TABLE IF EXISTS employees CASCADE;\nDROP TABLE IF EXISTS companies CASCADE;\nDROP TABLE IF EXISTS users CASCADE;\n`;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst express_1 = require(\"express\");\nconst bcryptjs_1 = tslib_1.__importDefault(require(\"bcryptjs\"));\nconst zod_1 = require(\"zod\");\nconst auth_1 = require(\"../middleware/auth\");\nconst error_handler_1 = require(\"../middleware/error-handler\");\nconst error_handler_2 = require(\"../middleware/error-handler\");\nconst database_1 = require(\"../services/database\");\nconst logger_1 = require(\"../utils/logger\");\nconst router = (0, express_1.Router)();\n// Validation schemas\nconst registerSchema = zod_1.z.object({\n    email: zod_1.z.string().email('Invalid email format'),\n    password: zod_1.z.string().min(8, 'Password must be at least 8 characters'),\n    name: zod_1.z.string().min(2, 'Name must be at least 2 characters'),\n    companyName: zod_1.z.string().optional(),\n    role: zod_1.z.enum(['admin', 'manager', 'operator']).default('operator')\n});\nconst loginSchema = zod_1.z.object({\n    email: zod_1.z.string().email('Invalid email format'),\n    password: zod_1.z.string().min(1, 'Password is required')\n});\nconst refreshTokenSchema = zod_1.z.object({\n    token: zod_1.z.string().min(1, 'Refresh token is required')\n});\n// Register new user\nrouter.post('/register', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const validatedData = registerSchema.parse(req.body);\n    // Check if user already exists\n    const existingUser = await database_1.DatabaseService.query('SELECT id FROM users WHERE email = $1', [validatedData.email]);\n    if (existingUser.rows.length > 0) {\n        throw new error_handler_2.ConflictError('User with this email already exists');\n    }\n    // Hash password\n    const hashedPassword = await bcryptjs_1.default.hash(validatedData.password, 12);\n    // Create user\n    const userResult = await database_1.DatabaseService.query(`INSERT INTO users (email, password_hash, name, role, created_at, updated_at) \n     VALUES ($1, $2, $3, $4, NOW(), NOW()) \n     RETURNING id, email, name, role`, [validatedData.email, hashedPassword, validatedData.name, validatedData.role]);\n    const user = userResult.rows[0];\n    // Generate JWT token\n    const token = (0, auth_1.generateToken)({\n        sub: user.id,\n        email: user.email,\n        name: user.name,\n        roles: [user.role],\n        permissions: getUserPermissions(user.role)\n    });\n    logger_1.logger.info('User registered successfully', {\n        userId: user.id,\n        email: user.email,\n        role: user.role\n    });\n    res.status(201).json({\n        message: 'User registered successfully',\n        user: {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            role: user.role\n        },\n        token\n    });\n}));\n// Login user\nrouter.post('/login', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const validatedData = loginSchema.parse(req.body);\n    // Find user by email\n    const userResult = await database_1.DatabaseService.query('SELECT id, email, name, password_hash, role, active FROM users WHERE email = $1', [validatedData.email]);\n    if (userResult.rows.length === 0) {\n        throw new error_handler_2.UnauthorizedError('Invalid email or password');\n    }\n    const user = userResult.rows[0];\n    if (!user.active) {\n        throw new error_handler_2.UnauthorizedError('Account is deactivated');\n    }\n    // Verify password\n    const isValidPassword = await bcryptjs_1.default.compare(validatedData.password, user.password_hash);\n    if (!isValidPassword) {\n        throw new error_handler_2.UnauthorizedError('Invalid email or password');\n    }\n    // Generate JWT token\n    const token = (0, auth_1.generateToken)({\n        sub: user.id,\n        email: user.email,\n        name: user.name,\n        roles: [user.role],\n        permissions: getUserPermissions(user.role)\n    });\n    // Update last login\n    await database_1.DatabaseService.query('UPDATE users SET last_login = NOW() WHERE id = $1', [user.id]);\n    logger_1.logger.info('User logged in successfully', {\n        userId: user.id,\n        email: user.email,\n        role: user.role\n    });\n    res.json({\n        message: 'Login successful',\n        user: {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            role: user.role\n        },\n        token\n    });\n}));\n// Refresh token\nrouter.post('/refresh', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const validatedData = refreshTokenSchema.parse(req.body);\n    try {\n        const newToken = (0, auth_1.refreshToken)(validatedData.token);\n        res.json({\n            message: 'Token refreshed successfully',\n            token: newToken\n        });\n    }\n    catch (error) {\n        throw new error_handler_2.UnauthorizedError('Invalid or expired refresh token');\n    }\n}));\n// Logout (client-side token removal, but we can log the event)\nrouter.post('/logout', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    // In a more sophisticated system, we might maintain a token blacklist\n    // For now, we just log the logout event\n    const authHeader = req.headers.authorization;\n    if (authHeader) {\n        logger_1.logger.info('User logged out', {\n            token: authHeader.substring(0, 20) + '...' // Log partial token for debugging\n        });\n    }\n    res.json({\n        message: 'Logout successful'\n    });\n}));\n// Get current user profile\nrouter.get('/me', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    // This endpoint requires authentication but we'll add that middleware later\n    // For now, return a placeholder\n    res.json({\n        message: 'Profile endpoint - requires authentication middleware'\n    });\n}));\n// Helper function to get user permissions based on role\nfunction getUserPermissions(role) {\n    const rolePermissions = {\n        admin: [\n            'user:read', 'user:write', 'user:delete',\n            'company:read', 'company:write',\n            'module:read', 'module:write', 'module:install',\n            'overwatch:read', 'overwatch:write',\n            'billing:read', 'billing:write',\n            'settings:read', 'settings:write'\n        ],\n        manager: [\n            'user:read',\n            'company:read',\n            'module:read', 'module:write',\n            'overwatch:read', 'overwatch:write',\n            'billing:read',\n            'settings:read'\n        ],\n        operator: [\n            'overwatch:read',\n            'company:read',\n            'module:read'\n        ]\n    };\n    return rolePermissions[role] || rolePermissions.operator;\n}\nexports.default = router;\n","import { Router } from 'express';\nimport bcrypt from 'bcryptjs';\nimport { z } from 'zod';\nimport { generateToken, refreshToken } from '../middleware/auth';\nimport { asyncHandler } from '../middleware/error-handler';\nimport { ValidationError, UnauthorizedError, ConflictError } from '../middleware/error-handler';\nimport { DatabaseService } from '../services/database';\nimport { logger } from '../utils/logger';\n\nconst router = Router();\n\n// Validation schemas\nconst registerSchema = z.object({\n  email: z.string().email('Invalid email format'),\n  password: z.string().min(8, 'Password must be at least 8 characters'),\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  companyName: z.string().optional(),\n  role: z.enum(['admin', 'manager', 'operator']).default('operator')\n});\n\nconst loginSchema = z.object({\n  email: z.string().email('Invalid email format'),\n  password: z.string().min(1, 'Password is required')\n});\n\nconst refreshTokenSchema = z.object({\n  token: z.string().min(1, 'Refresh token is required')\n});\n\n// Register new user\nrouter.post('/register', asyncHandler(async (req, res) => {\n  const validatedData = registerSchema.parse(req.body);\n  \n  // Check if user already exists\n  const existingUser = await DatabaseService.query(\n    'SELECT id FROM users WHERE email = $1',\n    [validatedData.email]\n  );\n  \n  if (existingUser.rows.length > 0) {\n    throw new ConflictError('User with this email already exists');\n  }\n  \n  // Hash password\n  const hashedPassword = await bcrypt.hash(validatedData.password, 12);\n  \n  // Create user\n  const userResult = await DatabaseService.query(\n    `INSERT INTO users (email, password_hash, name, role, created_at, updated_at) \n     VALUES ($1, $2, $3, $4, NOW(), NOW()) \n     RETURNING id, email, name, role`,\n    [validatedData.email, hashedPassword, validatedData.name, validatedData.role]\n  );\n  \n  const user = userResult.rows[0];\n  \n  // Generate JWT token\n  const token = generateToken({\n    sub: user.id,\n    email: user.email,\n    name: user.name,\n    roles: [user.role],\n    permissions: getUserPermissions(user.role)\n  });\n  \n  logger.info('User registered successfully', {\n    userId: user.id,\n    email: user.email,\n    role: user.role\n  });\n  \n  res.status(201).json({\n    message: 'User registered successfully',\n    user: {\n      id: user.id,\n      email: user.email,\n      name: user.name,\n      role: user.role\n    },\n    token\n  });\n}));\n\n// Login user\nrouter.post('/login', asyncHandler(async (req, res) => {\n  const validatedData = loginSchema.parse(req.body);\n  \n  // Find user by email\n  const userResult = await DatabaseService.query(\n    'SELECT id, email, name, password_hash, role, active FROM users WHERE email = $1',\n    [validatedData.email]\n  );\n  \n  if (userResult.rows.length === 0) {\n    throw new UnauthorizedError('Invalid email or password');\n  }\n  \n  const user = userResult.rows[0];\n  \n  if (!user.active) {\n    throw new UnauthorizedError('Account is deactivated');\n  }\n  \n  // Verify password\n  const isValidPassword = await bcrypt.compare(validatedData.password, user.password_hash);\n  \n  if (!isValidPassword) {\n    throw new UnauthorizedError('Invalid email or password');\n  }\n  \n  // Generate JWT token\n  const token = generateToken({\n    sub: user.id,\n    email: user.email,\n    name: user.name,\n    roles: [user.role],\n    permissions: getUserPermissions(user.role)\n  });\n  \n  // Update last login\n  await DatabaseService.query(\n    'UPDATE users SET last_login = NOW() WHERE id = $1',\n    [user.id]\n  );\n  \n  logger.info('User logged in successfully', {\n    userId: user.id,\n    email: user.email,\n    role: user.role\n  });\n  \n  res.json({\n    message: 'Login successful',\n    user: {\n      id: user.id,\n      email: user.email,\n      name: user.name,\n      role: user.role\n    },\n    token\n  });\n}));\n\n// Refresh token\nrouter.post('/refresh', asyncHandler(async (req, res) => {\n  const validatedData = refreshTokenSchema.parse(req.body);\n  \n  try {\n    const newToken = refreshToken(validatedData.token);\n    \n    res.json({\n      message: 'Token refreshed successfully',\n      token: newToken\n    });\n  } catch (error) {\n    throw new UnauthorizedError('Invalid or expired refresh token');\n  }\n}));\n\n// Logout (client-side token removal, but we can log the event)\nrouter.post('/logout', asyncHandler(async (req, res) => {\n  // In a more sophisticated system, we might maintain a token blacklist\n  // For now, we just log the logout event\n  \n  const authHeader = req.headers.authorization;\n  if (authHeader) {\n    logger.info('User logged out', {\n      token: authHeader.substring(0, 20) + '...' // Log partial token for debugging\n    });\n  }\n  \n  res.json({\n    message: 'Logout successful'\n  });\n}));\n\n// Get current user profile\nrouter.get('/me', asyncHandler(async (req, res) => {\n  // This endpoint requires authentication but we'll add that middleware later\n  // For now, return a placeholder\n  res.json({\n    message: 'Profile endpoint - requires authentication middleware'\n  });\n}));\n\n// Helper function to get user permissions based on role\nfunction getUserPermissions(role: string): string[] {\n  const rolePermissions = {\n    admin: [\n      'user:read', 'user:write', 'user:delete',\n      'company:read', 'company:write',\n      'module:read', 'module:write', 'module:install',\n      'overwatch:read', 'overwatch:write',\n      'billing:read', 'billing:write',\n      'settings:read', 'settings:write'\n    ],\n    manager: [\n      'user:read',\n      'company:read',\n      'module:read', 'module:write',\n      'overwatch:read', 'overwatch:write',\n      'billing:read',\n      'settings:read'\n    ],\n    operator: [\n      'overwatch:read',\n      'company:read',\n      'module:read'\n    ]\n  };\n  \n  return rolePermissions[role] || rolePermissions.operator;\n}\n\nexport default router;","module.exports = require(\"bcryptjs\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst express_1 = require(\"express\");\nconst error_handler_1 = require(\"../middleware/error-handler\");\nconst router = (0, express_1.Router)();\n// Get all users\nrouter.get('/', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    res.json({\n        message: 'Get all users - TODO: Implement user listing with pagination and filtering'\n    });\n}));\n// Get user by ID\nrouter.get('/:id', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    res.json({\n        message: `Get user ${req.params.id} - TODO: Implement user retrieval`\n    });\n}));\n// Update user\nrouter.put('/:id', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    res.json({\n        message: `Update user ${req.params.id} - TODO: Implement user update`\n    });\n}));\n// Delete user\nrouter.delete('/:id', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    res.json({\n        message: `Delete user ${req.params.id} - TODO: Implement user deletion`\n    });\n}));\nexports.default = router;\n","import { Router } from 'express';\nimport { asyncHandler } from '../middleware/error-handler';\n\nconst router = Router();\n\n// Get all users\nrouter.get('/', asyncHandler(async (req, res) => {\n  res.json({\n    message: 'Get all users - TODO: Implement user listing with pagination and filtering'\n  });\n}));\n\n// Get user by ID\nrouter.get('/:id', asyncHandler(async (req, res) => {\n  res.json({\n    message: `Get user ${req.params.id} - TODO: Implement user retrieval`\n  });\n}));\n\n// Update user\nrouter.put('/:id', asyncHandler(async (req, res) => {\n  res.json({\n    message: `Update user ${req.params.id} - TODO: Implement user update`\n  });\n}));\n\n// Delete user\nrouter.delete('/:id', asyncHandler(async (req, res) => {\n  res.json({\n    message: `Delete user ${req.params.id} - TODO: Implement user deletion`\n  });\n}));\n\nexport default router;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst express_1 = require(\"express\");\nconst error_handler_1 = require(\"../middleware/error-handler\");\nconst router = (0, express_1.Router)();\n// Get all available modules\nrouter.get('/', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    res.json({\n        message: 'Get all modules - TODO: Implement module registry listing'\n    });\n}));\n// Install module\nrouter.post('/install', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    res.json({\n        message: 'Install module - TODO: Implement module installation via plugin manager'\n    });\n}));\n// Enable/disable module\nrouter.patch('/:id/toggle', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    res.json({\n        message: `Toggle module ${req.params.id} - TODO: Implement module enable/disable`\n    });\n}));\n// Uninstall module\nrouter.delete('/:id', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    res.json({\n        message: `Uninstall module ${req.params.id} - TODO: Implement module uninstallation`\n    });\n}));\nexports.default = router;\n","import { Router } from 'express';\nimport { asyncHandler } from '../middleware/error-handler';\n\nconst router = Router();\n\n// Get all available modules\nrouter.get('/', asyncHandler(async (req, res) => {\n  res.json({\n    message: 'Get all modules - TODO: Implement module registry listing'\n  });\n}));\n\n// Install module\nrouter.post('/install', asyncHandler(async (req, res) => {\n  res.json({\n    message: 'Install module - TODO: Implement module installation via plugin manager'\n  });\n}));\n\n// Enable/disable module\nrouter.patch('/:id/toggle', asyncHandler(async (req, res) => {\n  res.json({\n    message: `Toggle module ${req.params.id} - TODO: Implement module enable/disable`\n  });\n}));\n\n// Uninstall module\nrouter.delete('/:id', asyncHandler(async (req, res) => {\n  res.json({\n    message: `Uninstall module ${req.params.id} - TODO: Implement module uninstallation`\n  });\n}));\n\nexport default router;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst express_1 = require(\"express\");\nconst error_handler_1 = require(\"../middleware/error-handler\");\nconst database_1 = require(\"../config/database\");\nconst weatherService_1 = require(\"../services/weatherService\");\nconst router = (0, express_1.Router)();\n// Get OverWatch dashboard data\nrouter.get('/dashboard', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        // Get active projects count\n        const projectsResult = await client.query(`\n      SELECT COUNT(*) as active_projects \n      FROM projects \n      WHERE status = 'active'\n    `);\n        // Get today's operations\n        const operationsResult = await client.query(`\n      SELECT COUNT(*) as operations_today\n      FROM project_operations \n      WHERE DATE(created_at) = CURRENT_DATE\n    `);\n        // Get active personnel\n        const personnelResult = await client.query(`\n      SELECT COUNT(*) as active_personnel\n      FROM users \n      WHERE active = true AND role IN ('operator', 'manager')\n    `);\n        // Get vehicles in use\n        const vehiclesResult = await client.query(`\n      SELECT COUNT(*) as vehicles_deployed\n      FROM fleet_vehicles \n      WHERE status = 'deployed'\n    `);\n        // Get today's costs\n        const costsResult = await client.query(`\n      SELECT \n        COALESCE(SUM(material_cost), 0) as material_costs,\n        COALESCE(SUM(labor_cost), 0) as labor_costs,\n        COALESCE(SUM(equipment_cost), 0) as equipment_costs\n      FROM daily_operations \n      WHERE DATE(operation_date) = CURRENT_DATE\n    `);\n        // Get recent alerts\n        const alertsResult = await client.query(`\n      SELECT id, type, message, severity, created_at\n      FROM system_alerts \n      WHERE resolved = false \n      ORDER BY created_at DESC \n      LIMIT 10\n    `);\n        const totalCosts = costsResult.rows[0];\n        const dailyTotal = parseFloat(totalCosts.material_costs) +\n            parseFloat(totalCosts.labor_costs) +\n            parseFloat(totalCosts.equipment_costs);\n        res.json({\n            success: true,\n            data: {\n                kpis: {\n                    activeProjects: parseInt(projectsResult.rows[0].active_projects),\n                    operationsToday: parseInt(operationsResult.rows[0].operations_today),\n                    activePersonnel: parseInt(personnelResult.rows[0].active_personnel),\n                    vehiclesDeployed: parseInt(vehiclesResult.rows[0].vehicles_deployed),\n                    dailyCosts: dailyTotal,\n                    activeAlerts: alertsResult.rows.length,\n                    completedScans: 47, // From PavementScan Pro integration\n                    defectsDetected: 12 // From AI analysis\n                },\n                alerts: alertsResult.rows,\n                lastUpdated: new Date().toISOString()\n            }\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\n// Get live cost center data\nrouter.get('/cost-center', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        // Daily costs\n        const dailyResult = await client.query(`\n      SELECT \n        COALESCE(SUM(wages), 0) as wages,\n        COALESCE(SUM(materials), 0) as materials,\n        COALESCE(SUM(fuel), 0) as fuel,\n        COALESCE(SUM(equipment), 0) as equipment,\n        COALESCE(SUM(overhead), 0) as overhead\n      FROM daily_cost_tracking \n      WHERE DATE(cost_date) = CURRENT_DATE\n    `);\n        // Weekly costs\n        const weeklyResult = await client.query(`\n      SELECT \n        COALESCE(SUM(wages), 0) as wages,\n        COALESCE(SUM(materials), 0) as materials,\n        COALESCE(SUM(fuel), 0) as fuel,\n        COALESCE(SUM(equipment), 0) as equipment,\n        COALESCE(SUM(overhead), 0) as overhead\n      FROM daily_cost_tracking \n      WHERE cost_date >= DATE_TRUNC('week', CURRENT_DATE)\n    `);\n        // Monthly costs\n        const monthlyResult = await client.query(`\n      SELECT \n        COALESCE(SUM(wages), 0) as wages,\n        COALESCE(SUM(materials), 0) as materials,\n        COALESCE(SUM(fuel), 0) as fuel,\n        COALESCE(SUM(equipment), 0) as equipment,\n        COALESCE(SUM(overhead), 0) as overhead\n      FROM daily_cost_tracking \n      WHERE cost_date >= DATE_TRUNC('month', CURRENT_DATE)\n    `);\n        // Material inventory\n        const inventoryResult = await client.query(`\n      SELECT \n        item_name,\n        current_stock,\n        unit_cost,\n        total_value\n      FROM inventory \n      WHERE category = 'sealcoating_materials'\n      ORDER BY total_value DESC\n    `);\n        const formatCostData = (row) => ({\n            wages: parseFloat(row.wages),\n            materials: parseFloat(row.materials),\n            fuel: parseFloat(row.fuel),\n            equipment: parseFloat(row.equipment),\n            overhead: parseFloat(row.overhead),\n            total: parseFloat(row.wages) + parseFloat(row.materials) +\n                parseFloat(row.fuel) + parseFloat(row.equipment) + parseFloat(row.overhead)\n        });\n        res.json({\n            success: true,\n            data: {\n                daily: formatCostData(dailyResult.rows[0]),\n                weekly: formatCostData(weeklyResult.rows[0]),\n                monthly: formatCostData(monthlyResult.rows[0]),\n                inventory: inventoryResult.rows,\n                lastUpdated: new Date().toISOString()\n            }\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\n// Get employee locations and tracking\nrouter.get('/locations', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        // Get active personnel with locations\n        const personnelResult = await client.query(`\n      SELECT \n        u.id,\n        u.name,\n        u.role,\n        pl.latitude,\n        pl.longitude,\n        pl.last_updated,\n        pl.status,\n        pl.current_project_id,\n        p.name as project_name\n      FROM users u\n      LEFT JOIN personnel_locations pl ON u.id = pl.user_id\n      LEFT JOIN projects p ON pl.current_project_id = p.id\n      WHERE u.active = true AND u.role IN ('operator', 'manager')\n    `);\n        // Get vehicle locations\n        const vehiclesResult = await client.query(`\n      SELECT \n        v.id,\n        v.vehicle_number,\n        v.type,\n        v.status,\n        vl.latitude,\n        vl.longitude,\n        vl.last_updated,\n        vl.assigned_operator,\n        u.name as operator_name\n      FROM fleet_vehicles v\n      LEFT JOIN vehicle_locations vl ON v.id = vl.vehicle_id\n      LEFT JOIN users u ON vl.assigned_operator = u.id\n      WHERE v.status IN ('active', 'deployed')\n    `);\n        // Get equipment tracking\n        const equipmentResult = await client.query(`\n      SELECT \n        e.id,\n        e.equipment_name,\n        e.type,\n        e.status,\n        el.latitude,\n        el.longitude,\n        el.last_updated,\n        el.assigned_project_id,\n        p.name as project_name\n      FROM equipment e\n      LEFT JOIN equipment_locations el ON e.id = el.equipment_id\n      LEFT JOIN projects p ON el.assigned_project_id = p.id\n      WHERE e.status = 'active'\n    `);\n        // Get geofenced areas\n        const geofencesResult = await client.query(`\n      SELECT \n        id,\n        name,\n        type,\n        center_lat,\n        center_lng,\n        radius,\n        active\n      FROM geofences \n      WHERE active = true\n    `);\n        res.json({\n            success: true,\n            data: {\n                personnel: personnelResult.rows.map(row => ({\n                    id: row.id,\n                    name: row.name,\n                    role: row.role,\n                    location: row.latitude && row.longitude ? {\n                        lat: parseFloat(row.latitude),\n                        lng: parseFloat(row.longitude),\n                        lastUpdated: row.last_updated\n                    } : null,\n                    status: row.status || 'offline',\n                    currentProject: row.project_name\n                })),\n                vehicles: vehiclesResult.rows.map(row => ({\n                    id: row.id,\n                    vehicleNumber: row.vehicle_number,\n                    type: row.type,\n                    status: row.status,\n                    location: row.latitude && row.longitude ? {\n                        lat: parseFloat(row.latitude),\n                        lng: parseFloat(row.longitude),\n                        lastUpdated: row.last_updated\n                    } : null,\n                    operator: row.operator_name\n                })),\n                equipment: equipmentResult.rows.map(row => ({\n                    id: row.id,\n                    name: row.equipment_name,\n                    type: row.type,\n                    status: row.status,\n                    location: row.latitude && row.longitude ? {\n                        lat: parseFloat(row.latitude),\n                        lng: parseFloat(row.longitude),\n                        lastUpdated: row.last_updated\n                    } : null,\n                    project: row.project_name\n                })),\n                geofences: geofencesResult.rows.map(row => ({\n                    id: row.id,\n                    name: row.name,\n                    type: row.type,\n                    center: {\n                        lat: parseFloat(row.center_lat),\n                        lng: parseFloat(row.center_lng)\n                    },\n                    radius: parseFloat(row.radius)\n                })),\n                lastUpdated: new Date().toISOString()\n            }\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\n// Get weather data (now uses real weather service)\nrouter.get('/weather', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    try {\n        const { lat, lon } = req.query;\n        // Use coordinates if provided, otherwise use default Stuart, VA location\n        const latitude = lat ? parseFloat(lat) : 36.5962;\n        const longitude = lon ? parseFloat(lon) : -80.2741;\n        const [weatherData, suitability] = await Promise.all([\n            weatherService_1.weatherService.getCurrentWeather(latitude, longitude),\n            weatherService_1.weatherService.isGoodForSealcoating(latitude, longitude)\n        ]);\n        res.json({\n            success: true,\n            data: {\n                current: weatherData.current,\n                hourlyForecast: weatherData.hourly.slice(0, 12),\n                alerts: weatherData.alerts,\n                suitability: suitability,\n                location: weatherData.location,\n                lastUpdated: weatherData.lastUpdated\n            }\n        });\n    }\n    catch (error) {\n        console.error('Weather API error:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Failed to fetch weather data',\n            message: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n}));\n// PavementScan Pro endpoints\nrouter.post('/pavement-scan', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        const { projectId, scanArea, scanType, images, gpsCoordinates, operatorId } = req.body;\n        // Save scan data to database\n        const scanResult = await client.query(`\n      INSERT INTO pavement_scans \n      (project_id, operator_id, scan_area, scan_type, gps_coordinates, status, created_at)\n      VALUES ($1, $2, $3, $4, $5, 'processing', NOW())\n      RETURNING id\n    `, [projectId, operatorId, scanArea, scanType, JSON.stringify(gpsCoordinates)]);\n        const scanId = scanResult.rows[0].id;\n        // Simulate AI processing (in real implementation, this would trigger ML analysis)\n        const defects = [\n            {\n                type: 'alligator_cracking',\n                severity: 'medium',\n                confidence: 0.89,\n                area: scanArea * 0.15,\n                location: gpsCoordinates,\n                recommendations: ['Surface preparation required', 'Crack filling before sealcoating']\n            },\n            {\n                type: 'longitudinal_cracking',\n                severity: 'low',\n                confidence: 0.94,\n                area: scanArea * 0.08,\n                location: gpsCoordinates,\n                recommendations: ['Monitor for progression', 'Standard sealcoating sufficient']\n            }\n        ];\n        // Update scan with results\n        await client.query(`\n      UPDATE pavement_scans \n      SET \n        defects_detected = $1,\n        ai_confidence = $2,\n        status = 'completed',\n        processed_at = NOW()\n      WHERE id = $3\n    `, [JSON.stringify(defects), 0.91, scanId]);\n        res.json({\n            success: true,\n            data: {\n                scanId: scanId,\n                status: 'completed',\n                defectsDetected: defects.length,\n                averageConfidence: 0.91,\n                defects: defects,\n                recommendations: [\n                    'Crack filling recommended before sealcoating',\n                    'Surface preparation required for alligator cracking areas',\n                    'Overall surface suitable for sealcoating after prep'\n                ],\n                estimatedRepairCost: scanArea * 0.23 * 0.15, // 15% of area needs repair\n                processedAt: new Date().toISOString()\n            }\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\n// Get scan history\nrouter.get('/pavement-scans', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        const { projectId, limit = 50 } = req.query;\n        let query = `\n      SELECT \n        ps.*,\n        u.name as operator_name,\n        p.name as project_name\n      FROM pavement_scans ps\n      LEFT JOIN users u ON ps.operator_id = u.id\n      LEFT JOIN projects p ON ps.project_id = p.id\n    `;\n        const params = [];\n        if (projectId) {\n            query += ' WHERE ps.project_id = $1';\n            params.push(projectId);\n        }\n        query += ` ORDER BY ps.created_at DESC LIMIT $${params.length + 1}`;\n        params.push(parseInt(limit));\n        const result = await client.query(query, params);\n        res.json({\n            success: true,\n            data: result.rows.map(row => ({\n                id: row.id,\n                projectId: row.project_id,\n                projectName: row.project_name,\n                operatorName: row.operator_name,\n                scanArea: parseFloat(row.scan_area),\n                scanType: row.scan_type,\n                gpsCoordinates: row.gps_coordinates,\n                status: row.status,\n                defectsDetected: row.defects_detected,\n                aiConfidence: parseFloat(row.ai_confidence),\n                createdAt: row.created_at,\n                processedAt: row.processed_at\n            }))\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\nexports.default = router;\n","import { Router } from 'express';\nimport { asyncHandler } from '../middleware/error-handler';\nimport { pool } from '../config/database';\nimport { weatherService } from '../services/weatherService';\n\nconst router = Router();\n\n// Get OverWatch dashboard data\nrouter.get('/dashboard', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    // Get active projects count\n    const projectsResult = await client.query(`\n      SELECT COUNT(*) as active_projects \n      FROM projects \n      WHERE status = 'active'\n    `);\n    \n    // Get today's operations\n    const operationsResult = await client.query(`\n      SELECT COUNT(*) as operations_today\n      FROM project_operations \n      WHERE DATE(created_at) = CURRENT_DATE\n    `);\n    \n    // Get active personnel\n    const personnelResult = await client.query(`\n      SELECT COUNT(*) as active_personnel\n      FROM users \n      WHERE active = true AND role IN ('operator', 'manager')\n    `);\n    \n    // Get vehicles in use\n    const vehiclesResult = await client.query(`\n      SELECT COUNT(*) as vehicles_deployed\n      FROM fleet_vehicles \n      WHERE status = 'deployed'\n    `);\n    \n    // Get today's costs\n    const costsResult = await client.query(`\n      SELECT \n        COALESCE(SUM(material_cost), 0) as material_costs,\n        COALESCE(SUM(labor_cost), 0) as labor_costs,\n        COALESCE(SUM(equipment_cost), 0) as equipment_costs\n      FROM daily_operations \n      WHERE DATE(operation_date) = CURRENT_DATE\n    `);\n    \n    // Get recent alerts\n    const alertsResult = await client.query(`\n      SELECT id, type, message, severity, created_at\n      FROM system_alerts \n      WHERE resolved = false \n      ORDER BY created_at DESC \n      LIMIT 10\n    `);\n    \n    const totalCosts = costsResult.rows[0];\n    const dailyTotal = parseFloat(totalCosts.material_costs) + \n                     parseFloat(totalCosts.labor_costs) + \n                     parseFloat(totalCosts.equipment_costs);\n    \n    res.json({\n      success: true,\n      data: {\n        kpis: {\n          activeProjects: parseInt(projectsResult.rows[0].active_projects),\n          operationsToday: parseInt(operationsResult.rows[0].operations_today),\n          activePersonnel: parseInt(personnelResult.rows[0].active_personnel),\n          vehiclesDeployed: parseInt(vehiclesResult.rows[0].vehicles_deployed),\n          dailyCosts: dailyTotal,\n          activeAlerts: alertsResult.rows.length,\n          completedScans: 47, // From PavementScan Pro integration\n          defectsDetected: 12  // From AI analysis\n        },\n        alerts: alertsResult.rows,\n        lastUpdated: new Date().toISOString()\n      }\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\n// Get live cost center data\nrouter.get('/cost-center', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    // Daily costs\n    const dailyResult = await client.query(`\n      SELECT \n        COALESCE(SUM(wages), 0) as wages,\n        COALESCE(SUM(materials), 0) as materials,\n        COALESCE(SUM(fuel), 0) as fuel,\n        COALESCE(SUM(equipment), 0) as equipment,\n        COALESCE(SUM(overhead), 0) as overhead\n      FROM daily_cost_tracking \n      WHERE DATE(cost_date) = CURRENT_DATE\n    `);\n    \n    // Weekly costs\n    const weeklyResult = await client.query(`\n      SELECT \n        COALESCE(SUM(wages), 0) as wages,\n        COALESCE(SUM(materials), 0) as materials,\n        COALESCE(SUM(fuel), 0) as fuel,\n        COALESCE(SUM(equipment), 0) as equipment,\n        COALESCE(SUM(overhead), 0) as overhead\n      FROM daily_cost_tracking \n      WHERE cost_date >= DATE_TRUNC('week', CURRENT_DATE)\n    `);\n    \n    // Monthly costs\n    const monthlyResult = await client.query(`\n      SELECT \n        COALESCE(SUM(wages), 0) as wages,\n        COALESCE(SUM(materials), 0) as materials,\n        COALESCE(SUM(fuel), 0) as fuel,\n        COALESCE(SUM(equipment), 0) as equipment,\n        COALESCE(SUM(overhead), 0) as overhead\n      FROM daily_cost_tracking \n      WHERE cost_date >= DATE_TRUNC('month', CURRENT_DATE)\n    `);\n    \n    // Material inventory\n    const inventoryResult = await client.query(`\n      SELECT \n        item_name,\n        current_stock,\n        unit_cost,\n        total_value\n      FROM inventory \n      WHERE category = 'sealcoating_materials'\n      ORDER BY total_value DESC\n    `);\n    \n    const formatCostData = (row: any) => ({\n      wages: parseFloat(row.wages),\n      materials: parseFloat(row.materials),\n      fuel: parseFloat(row.fuel),\n      equipment: parseFloat(row.equipment),\n      overhead: parseFloat(row.overhead),\n      total: parseFloat(row.wages) + parseFloat(row.materials) + \n             parseFloat(row.fuel) + parseFloat(row.equipment) + parseFloat(row.overhead)\n    });\n    \n    res.json({\n      success: true,\n      data: {\n        daily: formatCostData(dailyResult.rows[0]),\n        weekly: formatCostData(weeklyResult.rows[0]),\n        monthly: formatCostData(monthlyResult.rows[0]),\n        inventory: inventoryResult.rows,\n        lastUpdated: new Date().toISOString()\n      }\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\n// Get employee locations and tracking\nrouter.get('/locations', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    // Get active personnel with locations\n    const personnelResult = await client.query(`\n      SELECT \n        u.id,\n        u.name,\n        u.role,\n        pl.latitude,\n        pl.longitude,\n        pl.last_updated,\n        pl.status,\n        pl.current_project_id,\n        p.name as project_name\n      FROM users u\n      LEFT JOIN personnel_locations pl ON u.id = pl.user_id\n      LEFT JOIN projects p ON pl.current_project_id = p.id\n      WHERE u.active = true AND u.role IN ('operator', 'manager')\n    `);\n    \n    // Get vehicle locations\n    const vehiclesResult = await client.query(`\n      SELECT \n        v.id,\n        v.vehicle_number,\n        v.type,\n        v.status,\n        vl.latitude,\n        vl.longitude,\n        vl.last_updated,\n        vl.assigned_operator,\n        u.name as operator_name\n      FROM fleet_vehicles v\n      LEFT JOIN vehicle_locations vl ON v.id = vl.vehicle_id\n      LEFT JOIN users u ON vl.assigned_operator = u.id\n      WHERE v.status IN ('active', 'deployed')\n    `);\n    \n    // Get equipment tracking\n    const equipmentResult = await client.query(`\n      SELECT \n        e.id,\n        e.equipment_name,\n        e.type,\n        e.status,\n        el.latitude,\n        el.longitude,\n        el.last_updated,\n        el.assigned_project_id,\n        p.name as project_name\n      FROM equipment e\n      LEFT JOIN equipment_locations el ON e.id = el.equipment_id\n      LEFT JOIN projects p ON el.assigned_project_id = p.id\n      WHERE e.status = 'active'\n    `);\n    \n    // Get geofenced areas\n    const geofencesResult = await client.query(`\n      SELECT \n        id,\n        name,\n        type,\n        center_lat,\n        center_lng,\n        radius,\n        active\n      FROM geofences \n      WHERE active = true\n    `);\n    \n    res.json({\n      success: true,\n      data: {\n        personnel: personnelResult.rows.map(row => ({\n          id: row.id,\n          name: row.name,\n          role: row.role,\n          location: row.latitude && row.longitude ? {\n            lat: parseFloat(row.latitude),\n            lng: parseFloat(row.longitude),\n            lastUpdated: row.last_updated\n          } : null,\n          status: row.status || 'offline',\n          currentProject: row.project_name\n        })),\n        vehicles: vehiclesResult.rows.map(row => ({\n          id: row.id,\n          vehicleNumber: row.vehicle_number,\n          type: row.type,\n          status: row.status,\n          location: row.latitude && row.longitude ? {\n            lat: parseFloat(row.latitude),\n            lng: parseFloat(row.longitude),\n            lastUpdated: row.last_updated\n          } : null,\n          operator: row.operator_name\n        })),\n        equipment: equipmentResult.rows.map(row => ({\n          id: row.id,\n          name: row.equipment_name,\n          type: row.type,\n          status: row.status,\n          location: row.latitude && row.longitude ? {\n            lat: parseFloat(row.latitude),\n            lng: parseFloat(row.longitude),\n            lastUpdated: row.last_updated\n          } : null,\n          project: row.project_name\n        })),\n        geofences: geofencesResult.rows.map(row => ({\n          id: row.id,\n          name: row.name,\n          type: row.type,\n          center: {\n            lat: parseFloat(row.center_lat),\n            lng: parseFloat(row.center_lng)\n          },\n          radius: parseFloat(row.radius)\n        })),\n        lastUpdated: new Date().toISOString()\n      }\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\n// Get weather data (now uses real weather service)\nrouter.get('/weather', asyncHandler(async (req, res) => {\n  try {\n    const { lat, lon } = req.query;\n    \n    // Use coordinates if provided, otherwise use default Stuart, VA location\n    const latitude = lat ? parseFloat(lat as string) : 36.5962;\n    const longitude = lon ? parseFloat(lon as string) : -80.2741;\n    \n    const [weatherData, suitability] = await Promise.all([\n      weatherService.getCurrentWeather(latitude, longitude),\n      weatherService.isGoodForSealcoating(latitude, longitude)\n    ]);\n    \n    res.json({\n      success: true,\n      data: {\n        current: weatherData.current,\n        hourlyForecast: weatherData.hourly.slice(0, 12),\n        alerts: weatherData.alerts,\n        suitability: suitability,\n        location: weatherData.location,\n        lastUpdated: weatherData.lastUpdated\n      }\n    });\n    \n  } catch (error) {\n    console.error('Weather API error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch weather data',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}));\n\n// PavementScan Pro endpoints\nrouter.post('/pavement-scan', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    const { \n      projectId, \n      scanArea, \n      scanType, \n      images, \n      gpsCoordinates,\n      operatorId \n    } = req.body;\n    \n    // Save scan data to database\n    const scanResult = await client.query(`\n      INSERT INTO pavement_scans \n      (project_id, operator_id, scan_area, scan_type, gps_coordinates, status, created_at)\n      VALUES ($1, $2, $3, $4, $5, 'processing', NOW())\n      RETURNING id\n    `, [projectId, operatorId, scanArea, scanType, JSON.stringify(gpsCoordinates)]);\n    \n    const scanId = scanResult.rows[0].id;\n    \n    // Simulate AI processing (in real implementation, this would trigger ML analysis)\n    const defects = [\n      {\n        type: 'alligator_cracking',\n        severity: 'medium',\n        confidence: 0.89,\n        area: scanArea * 0.15,\n        location: gpsCoordinates,\n        recommendations: ['Surface preparation required', 'Crack filling before sealcoating']\n      },\n      {\n        type: 'longitudinal_cracking',\n        severity: 'low',\n        confidence: 0.94,\n        area: scanArea * 0.08,\n        location: gpsCoordinates,\n        recommendations: ['Monitor for progression', 'Standard sealcoating sufficient']\n      }\n    ];\n    \n    // Update scan with results\n    await client.query(`\n      UPDATE pavement_scans \n      SET \n        defects_detected = $1,\n        ai_confidence = $2,\n        status = 'completed',\n        processed_at = NOW()\n      WHERE id = $3\n    `, [JSON.stringify(defects), 0.91, scanId]);\n    \n    res.json({\n      success: true,\n      data: {\n        scanId: scanId,\n        status: 'completed',\n        defectsDetected: defects.length,\n        averageConfidence: 0.91,\n        defects: defects,\n        recommendations: [\n          'Crack filling recommended before sealcoating',\n          'Surface preparation required for alligator cracking areas',\n          'Overall surface suitable for sealcoating after prep'\n        ],\n        estimatedRepairCost: scanArea * 0.23 * 0.15, // 15% of area needs repair\n        processedAt: new Date().toISOString()\n      }\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\n// Get scan history\nrouter.get('/pavement-scans', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    const { projectId, limit = 50 } = req.query;\n    \n    let query = `\n      SELECT \n        ps.*,\n        u.name as operator_name,\n        p.name as project_name\n      FROM pavement_scans ps\n      LEFT JOIN users u ON ps.operator_id = u.id\n      LEFT JOIN projects p ON ps.project_id = p.id\n    `;\n    \n    const params: any[] = [];\n    if (projectId) {\n      query += ' WHERE ps.project_id = $1';\n      params.push(projectId);\n    }\n    \n    query += ` ORDER BY ps.created_at DESC LIMIT $${params.length + 1}`;\n    params.push(parseInt(limit as string));\n    \n    const result = await client.query(query, params);\n    \n    res.json({\n      success: true,\n      data: result.rows.map(row => ({\n        id: row.id,\n        projectId: row.project_id,\n        projectName: row.project_name,\n        operatorName: row.operator_name,\n        scanArea: parseFloat(row.scan_area),\n        scanType: row.scan_type,\n        gpsCoordinates: row.gps_coordinates,\n        status: row.status,\n        defectsDetected: row.defects_detected,\n        aiConfidence: parseFloat(row.ai_confidence),\n        createdAt: row.created_at,\n        processedAt: row.processed_at\n      }))\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\nexport default router;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pool = void 0;\nconst pg_1 = require(\"pg\");\nconst logger_1 = require(\"../utils/logger\");\nconst { DB_HOST = 'localhost', DB_PORT = '5432', DB_NAME = 'blacktop_blackout_dev', DB_USER = 'postgres', DB_PASSWORD = 'password', DATABASE_URL, NODE_ENV = 'development' } = process.env;\nconst connectionConfig = DATABASE_URL\n    ? { connectionString: DATABASE_URL, ssl: NODE_ENV === 'production' ? { rejectUnauthorized: false } : false }\n    : {\n        host: DB_HOST,\n        port: parseInt(DB_PORT, 10),\n        database: DB_NAME,\n        user: DB_USER,\n        password: DB_PASSWORD,\n        ssl: NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n        max: 20,\n        idleTimeoutMillis: 30000,\n        connectionTimeoutMillis: 2000,\n    };\nexports.pool = new pg_1.Pool(connectionConfig);\n// Test database connection\nexports.pool.on('connect', () => {\n    logger_1.logger.info('Database connected successfully');\n});\nexports.pool.on('error', (err) => {\n    logger_1.logger.error('Database connection error:', err);\n});\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n    logger_1.logger.info('Shutting down database connection pool...');\n    await exports.pool.end();\n    process.exit(0);\n});\nprocess.on('SIGTERM', async () => {\n    logger_1.logger.info('Shutting down database connection pool...');\n    await exports.pool.end();\n    process.exit(0);\n});\nexports.default = exports.pool;\n","import { Pool } from 'pg';\nimport { logger } from '../utils/logger';\n\nconst {\n  DB_HOST = 'localhost',\n  DB_PORT = '5432',\n  DB_NAME = 'blacktop_blackout_dev',\n  DB_USER = 'postgres',\n  DB_PASSWORD = 'password',\n  DATABASE_URL,\n  NODE_ENV = 'development'\n} = process.env;\n\nconst connectionConfig = DATABASE_URL \n  ? { connectionString: DATABASE_URL, ssl: NODE_ENV === 'production' ? { rejectUnauthorized: false } : false }\n  : {\n      host: DB_HOST,\n      port: parseInt(DB_PORT, 10),\n      database: DB_NAME,\n      user: DB_USER,\n      password: DB_PASSWORD,\n      ssl: NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n      max: 20,\n      idleTimeoutMillis: 30000,\n      connectionTimeoutMillis: 2000,\n    };\n\nexport const pool = new Pool(connectionConfig);\n\n// Test database connection\npool.on('connect', () => {\n  logger.info('Database connected successfully');\n});\n\npool.on('error', (err) => {\n  logger.error('Database connection error:', err);\n});\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  logger.info('Shutting down database connection pool...');\n  await pool.end();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n  logger.info('Shutting down database connection pool...');\n  await pool.end();\n  process.exit(0);\n});\n\nexport default pool;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WeatherService = exports.weatherService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst axios_1 = tslib_1.__importDefault(require(\"axios\"));\nclass WeatherService {\n    constructor() {\n        this.API_KEY = process.env.WEATHER_API_KEY || 'demo_key';\n        this.BASE_URL = 'https://api.weatherapi.com/v1';\n        this.STUART_VA_COORDS = { lat: 36.5962, lon: -80.2741 };\n        this.cache = new Map();\n        this.CACHE_DURATION = 10 * 60 * 1000; // 10 minutes\n    }\n    async getCurrentWeather(lat, lon) {\n        const coords = {\n            lat: lat || this.STUART_VA_COORDS.lat,\n            lon: lon || this.STUART_VA_COORDS.lon\n        };\n        const cacheKey = `weather_${coords.lat}_${coords.lon}`;\n        const cached = this.cache.get(cacheKey);\n        if (cached && Date.now() - cached.timestamp < this.CACHE_DURATION) {\n            return cached.data;\n        }\n        try {\n            // Get current weather and forecast\n            const [currentResponse, forecastResponse] = await Promise.all([\n                axios_1.default.get(`${this.BASE_URL}/current.json`, {\n                    params: {\n                        key: this.API_KEY,\n                        q: `${coords.lat},${coords.lon}`,\n                        aqi: 'no'\n                    }\n                }),\n                axios_1.default.get(`${this.BASE_URL}/forecast.json`, {\n                    params: {\n                        key: this.API_KEY,\n                        q: `${coords.lat},${coords.lon}`,\n                        days: 3,\n                        aqi: 'no',\n                        alerts: 'yes'\n                    }\n                })\n            ]);\n            const current = currentResponse.data.current;\n            const location = currentResponse.data.location;\n            const forecast = forecastResponse.data.forecast;\n            const weatherData = {\n                current: {\n                    temperature: current.temp_f,\n                    feelsLike: current.feelslike_f,\n                    humidity: current.humidity,\n                    windSpeed: current.wind_mph,\n                    windDirection: current.wind_degree,\n                    pressure: current.pressure_in,\n                    visibility: current.vis_miles,\n                    uvIndex: current.uv,\n                    conditions: current.condition.text,\n                    precipitation: current.precip_in,\n                    dewPoint: current.dewpoint_f\n                },\n                hourly: this.processHourlyForecast(forecast.forecastday),\n                daily: this.processDailyForecast(forecast.forecastday),\n                alerts: this.generateOperationalAlerts(current, forecast),\n                location: {\n                    name: location.name,\n                    region: location.region,\n                    country: location.country,\n                    lat: location.lat,\n                    lon: location.lon\n                },\n                lastUpdated: new Date()\n            };\n            this.cache.set(cacheKey, { data: weatherData, timestamp: Date.now() });\n            return weatherData;\n        }\n        catch (error) {\n            console.error('WeatherAPI error:', error);\n            // Return mock data if API fails\n            return this.getMockWeatherData(coords);\n        }\n    }\n    processHourlyForecast(forecastDays) {\n        const hourlyData = [];\n        forecastDays.forEach(day => {\n            day.hour.forEach((hour) => {\n                hourlyData.push({\n                    datetime: new Date(hour.time),\n                    temperature: hour.temp_f,\n                    conditions: hour.condition.text,\n                    precipitation: hour.precip_in,\n                    windSpeed: hour.wind_mph,\n                    humidity: hour.humidity,\n                    icon: hour.condition.icon\n                });\n            });\n        });\n        return hourlyData.slice(0, 48); // Next 48 hours\n    }\n    processDailyForecast(forecastDays) {\n        return forecastDays.map(day => ({\n            datetime: new Date(day.date),\n            temperature: day.day.avgtemp_f,\n            conditions: day.day.condition.text,\n            precipitation: day.day.totalprecip_in,\n            windSpeed: day.day.maxwind_mph,\n            humidity: day.day.avghumidity,\n            icon: day.day.condition.icon\n        }));\n    }\n    generateOperationalAlerts(current, forecast) {\n        const alerts = [];\n        const now = new Date();\n        // Temperature alerts\n        if (current.temp_f < 50) {\n            alerts.push({\n                id: `temp_low_${now.getTime()}`,\n                type: 'temperature',\n                severity: 'high',\n                title: 'Temperature Too Low',\n                description: `Current temperature ${current.temp_f}°F is below optimal sealcoating range`,\n                recommendation: 'Wait for temperatures above 50°F before beginning sealcoating operations',\n                timestamp: now\n            });\n        }\n        else if (current.temp_f > 95) {\n            alerts.push({\n                id: `temp_high_${now.getTime()}`,\n                type: 'temperature',\n                severity: 'medium',\n                title: 'High Temperature Warning',\n                description: `Current temperature ${current.temp_f}°F may cause rapid drying`,\n                recommendation: 'Consider early morning or evening application to avoid extreme heat',\n                timestamp: now\n            });\n        }\n        // Precipitation alerts\n        if (current.precip_in > 0) {\n            alerts.push({\n                id: `rain_current_${now.getTime()}`,\n                type: 'rain',\n                severity: 'critical',\n                title: 'Active Precipitation',\n                description: 'Rain detected - sealcoating operations should be halted',\n                recommendation: 'Wait for precipitation to stop and surface to dry before resuming',\n                timestamp: now\n            });\n        }\n        // Wind alerts\n        if (current.wind_mph > 15) {\n            alerts.push({\n                id: `wind_high_${now.getTime()}`,\n                type: 'wind',\n                severity: 'medium',\n                title: 'High Wind Warning',\n                description: `Wind speed ${current.wind_mph} mph may affect spray application quality`,\n                recommendation: 'Consider using alternative application methods or wait for calmer conditions',\n                timestamp: now\n            });\n        }\n        // UV alerts\n        if (current.uv > 8) {\n            alerts.push({\n                id: `uv_high_${now.getTime()}`,\n                type: 'uv',\n                severity: 'low',\n                title: 'High UV Index',\n                description: `UV index ${current.uv} - ensure crew protection`,\n                recommendation: 'Provide adequate sun protection for crew members',\n                timestamp: now\n            });\n        }\n        // Forecast precipitation alerts\n        const next24Hours = forecast.forecastday[0].hour.slice(new Date().getHours());\n        const rainInNext24 = next24Hours.some((hour) => hour.precip_in > 0.01);\n        if (rainInNext24) {\n            alerts.push({\n                id: `rain_forecast_${now.getTime()}`,\n                type: 'rain',\n                severity: 'high',\n                title: 'Rain Forecast',\n                description: 'Precipitation expected within 24 hours',\n                recommendation: 'Plan operations to allow sufficient curing time before rain',\n                timestamp: now\n            });\n        }\n        return alerts;\n    }\n    getMockWeatherData(coords) {\n        const now = new Date();\n        return {\n            current: {\n                temperature: 72,\n                feelsLike: 75,\n                humidity: 65,\n                windSpeed: 8,\n                windDirection: 180,\n                pressure: 30.15,\n                visibility: 10,\n                uvIndex: 6,\n                conditions: 'Partly Cloudy',\n                precipitation: 0,\n                dewPoint: 58\n            },\n            hourly: Array.from({ length: 24 }, (_, i) => ({\n                datetime: new Date(now.getTime() + i * 60 * 60 * 1000),\n                temperature: 72 + (Math.random() - 0.5) * 10,\n                conditions: 'Partly Cloudy',\n                precipitation: 0,\n                windSpeed: 8 + (Math.random() - 0.5) * 4,\n                humidity: 65 + (Math.random() - 0.5) * 20,\n                icon: '//cdn.weatherapi.com/weather/64x64/day/116.png'\n            })),\n            daily: Array.from({ length: 3 }, (_, i) => ({\n                datetime: new Date(now.getTime() + i * 24 * 60 * 60 * 1000),\n                temperature: 72 + (Math.random() - 0.5) * 15,\n                conditions: 'Partly Cloudy',\n                precipitation: 0,\n                windSpeed: 10,\n                humidity: 65,\n                icon: '//cdn.weatherapi.com/weather/64x64/day/116.png'\n            })),\n            alerts: [],\n            location: {\n                name: 'Stuart',\n                region: 'Virginia',\n                country: 'United States',\n                lat: coords.lat,\n                lon: coords.lon\n            },\n            lastUpdated: now\n        };\n    }\n    async getWeatherAlerts(lat, lon) {\n        const weather = await this.getCurrentWeather(lat, lon);\n        return weather.alerts;\n    }\n    async getHourlyForecast(lat, lon) {\n        const weather = await this.getCurrentWeather(lat, lon);\n        return weather.hourly;\n    }\n    async isGoodForSealcoating(lat, lon) {\n        const weather = await this.getCurrentWeather(lat, lon);\n        const current = weather.current;\n        const reasons = [];\n        const recommendations = [];\n        let suitable = true;\n        // Temperature check\n        if (current.temperature < 50) {\n            suitable = false;\n            reasons.push(`Temperature too low (${current.temperature}°F)`);\n            recommendations.push('Wait for temperatures above 50°F');\n        }\n        else if (current.temperature > 95) {\n            reasons.push(`High temperature (${current.temperature}°F)`);\n            recommendations.push('Consider early morning or evening application');\n        }\n        else {\n            reasons.push(`Temperature optimal (${current.temperature}°F)`);\n        }\n        // Precipitation check\n        if (current.precipitation > 0) {\n            suitable = false;\n            reasons.push('Active precipitation detected');\n            recommendations.push('Wait for rain to stop and surface to dry');\n        }\n        else {\n            reasons.push('No precipitation detected');\n        }\n        // Wind check\n        if (current.windSpeed > 15) {\n            reasons.push(`High wind speed (${current.windSpeed} mph)`);\n            recommendations.push('Use alternative application methods or wait for calmer conditions');\n        }\n        else {\n            reasons.push(`Wind speed acceptable (${current.windSpeed} mph)`);\n        }\n        // Humidity check\n        if (current.humidity > 85) {\n            reasons.push(`High humidity (${current.humidity}%)`);\n            recommendations.push('Allow extra curing time due to high humidity');\n        }\n        else {\n            reasons.push(`Humidity levels good (${current.humidity}%)`);\n        }\n        // Overall recommendations\n        if (suitable) {\n            recommendations.push('Conditions are suitable for sealcoating operations');\n            recommendations.push('Monitor weather conditions throughout the day');\n        }\n        return {\n            suitable,\n            reasons,\n            recommendations\n        };\n    }\n}\nexports.WeatherService = WeatherService;\nexports.weatherService = new WeatherService();\n","import axios from 'axios'\n\ninterface WeatherConditions {\n  temperature: number\n  feelsLike: number\n  humidity: number\n  windSpeed: number\n  windDirection: number\n  pressure: number\n  visibility: number\n  uvIndex: number\n  conditions: string\n  precipitation: number\n  dewPoint: number\n}\n\ninterface WeatherForecast {\n  datetime: Date\n  temperature: number\n  conditions: string\n  precipitation: number\n  windSpeed: number\n  humidity: number\n  icon: string\n}\n\ninterface WeatherAlert {\n  id: string\n  type: 'rain' | 'temperature' | 'wind' | 'uv' | 'general'\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  title: string\n  description: string\n  recommendation: string\n  timestamp: Date\n}\n\ninterface WeatherData {\n  current: WeatherConditions\n  hourly: WeatherForecast[]\n  daily: WeatherForecast[]\n  alerts: WeatherAlert[]\n  location: {\n    name: string\n    region: string\n    country: string\n    lat: number\n    lon: number\n  }\n  lastUpdated: Date\n}\n\nclass WeatherService {\n  private readonly API_KEY = process.env.WEATHER_API_KEY || 'demo_key'\n  private readonly BASE_URL = 'https://api.weatherapi.com/v1'\n  private readonly STUART_VA_COORDS = { lat: 36.5962, lon: -80.2741 }\n  private cache = new Map<string, { data: WeatherData; timestamp: number }>()\n  private readonly CACHE_DURATION = 10 * 60 * 1000 // 10 minutes\n\n  async getCurrentWeather(lat?: number, lon?: number): Promise<WeatherData> {\n    const coords = { \n      lat: lat || this.STUART_VA_COORDS.lat, \n      lon: lon || this.STUART_VA_COORDS.lon \n    }\n    \n    const cacheKey = `weather_${coords.lat}_${coords.lon}`\n    const cached = this.cache.get(cacheKey)\n    \n    if (cached && Date.now() - cached.timestamp < this.CACHE_DURATION) {\n      return cached.data\n    }\n\n    try {\n      // Get current weather and forecast\n      const [currentResponse, forecastResponse] = await Promise.all([\n        axios.get(`${this.BASE_URL}/current.json`, {\n          params: {\n            key: this.API_KEY,\n            q: `${coords.lat},${coords.lon}`,\n            aqi: 'no'\n          }\n        }),\n        axios.get(`${this.BASE_URL}/forecast.json`, {\n          params: {\n            key: this.API_KEY,\n            q: `${coords.lat},${coords.lon}`,\n            days: 3,\n            aqi: 'no',\n            alerts: 'yes'\n          }\n        })\n      ])\n\n      const current = currentResponse.data.current\n      const location = currentResponse.data.location\n      const forecast = forecastResponse.data.forecast\n\n      const weatherData: WeatherData = {\n        current: {\n          temperature: current.temp_f,\n          feelsLike: current.feelslike_f,\n          humidity: current.humidity,\n          windSpeed: current.wind_mph,\n          windDirection: current.wind_degree,\n          pressure: current.pressure_in,\n          visibility: current.vis_miles,\n          uvIndex: current.uv,\n          conditions: current.condition.text,\n          precipitation: current.precip_in,\n          dewPoint: current.dewpoint_f\n        },\n        hourly: this.processHourlyForecast(forecast.forecastday),\n        daily: this.processDailyForecast(forecast.forecastday),\n        alerts: this.generateOperationalAlerts(current, forecast),\n        location: {\n          name: location.name,\n          region: location.region,\n          country: location.country,\n          lat: location.lat,\n          lon: location.lon\n        },\n        lastUpdated: new Date()\n      }\n\n      this.cache.set(cacheKey, { data: weatherData, timestamp: Date.now() })\n      return weatherData\n\n    } catch (error) {\n      console.error('WeatherAPI error:', error)\n      // Return mock data if API fails\n      return this.getMockWeatherData(coords)\n    }\n  }\n\n  private processHourlyForecast(forecastDays: any[]): WeatherForecast[] {\n    const hourlyData: WeatherForecast[] = []\n    \n    forecastDays.forEach(day => {\n      day.hour.forEach((hour: any) => {\n        hourlyData.push({\n          datetime: new Date(hour.time),\n          temperature: hour.temp_f,\n          conditions: hour.condition.text,\n          precipitation: hour.precip_in,\n          windSpeed: hour.wind_mph,\n          humidity: hour.humidity,\n          icon: hour.condition.icon\n        })\n      })\n    })\n    \n    return hourlyData.slice(0, 48) // Next 48 hours\n  }\n\n  private processDailyForecast(forecastDays: any[]): WeatherForecast[] {\n    return forecastDays.map(day => ({\n      datetime: new Date(day.date),\n      temperature: day.day.avgtemp_f,\n      conditions: day.day.condition.text,\n      precipitation: day.day.totalprecip_in,\n      windSpeed: day.day.maxwind_mph,\n      humidity: day.day.avghumidity,\n      icon: day.day.condition.icon\n    }))\n  }\n\n  private generateOperationalAlerts(current: any, forecast: any): WeatherAlert[] {\n    const alerts: WeatherAlert[] = []\n    const now = new Date()\n\n    // Temperature alerts\n    if (current.temp_f < 50) {\n      alerts.push({\n        id: `temp_low_${now.getTime()}`,\n        type: 'temperature',\n        severity: 'high',\n        title: 'Temperature Too Low',\n        description: `Current temperature ${current.temp_f}°F is below optimal sealcoating range`,\n        recommendation: 'Wait for temperatures above 50°F before beginning sealcoating operations',\n        timestamp: now\n      })\n    } else if (current.temp_f > 95) {\n      alerts.push({\n        id: `temp_high_${now.getTime()}`,\n        type: 'temperature',\n        severity: 'medium',\n        title: 'High Temperature Warning',\n        description: `Current temperature ${current.temp_f}°F may cause rapid drying`,\n        recommendation: 'Consider early morning or evening application to avoid extreme heat',\n        timestamp: now\n      })\n    }\n\n    // Precipitation alerts\n    if (current.precip_in > 0) {\n      alerts.push({\n        id: `rain_current_${now.getTime()}`,\n        type: 'rain',\n        severity: 'critical',\n        title: 'Active Precipitation',\n        description: 'Rain detected - sealcoating operations should be halted',\n        recommendation: 'Wait for precipitation to stop and surface to dry before resuming',\n        timestamp: now\n      })\n    }\n\n    // Wind alerts\n    if (current.wind_mph > 15) {\n      alerts.push({\n        id: `wind_high_${now.getTime()}`,\n        type: 'wind',\n        severity: 'medium',\n        title: 'High Wind Warning',\n        description: `Wind speed ${current.wind_mph} mph may affect spray application quality`,\n        recommendation: 'Consider using alternative application methods or wait for calmer conditions',\n        timestamp: now\n      })\n    }\n\n    // UV alerts\n    if (current.uv > 8) {\n      alerts.push({\n        id: `uv_high_${now.getTime()}`,\n        type: 'uv',\n        severity: 'low',\n        title: 'High UV Index',\n        description: `UV index ${current.uv} - ensure crew protection`,\n        recommendation: 'Provide adequate sun protection for crew members',\n        timestamp: now\n      })\n    }\n\n    // Forecast precipitation alerts\n    const next24Hours = forecast.forecastday[0].hour.slice(new Date().getHours())\n    const rainInNext24 = next24Hours.some((hour: any) => hour.precip_in > 0.01)\n    \n    if (rainInNext24) {\n      alerts.push({\n        id: `rain_forecast_${now.getTime()}`,\n        type: 'rain',\n        severity: 'high',\n        title: 'Rain Forecast',\n        description: 'Precipitation expected within 24 hours',\n        recommendation: 'Plan operations to allow sufficient curing time before rain',\n        timestamp: now\n      })\n    }\n\n    return alerts\n  }\n\n  private getMockWeatherData(coords: { lat: number; lon: number }): WeatherData {\n    const now = new Date()\n    \n    return {\n      current: {\n        temperature: 72,\n        feelsLike: 75,\n        humidity: 65,\n        windSpeed: 8,\n        windDirection: 180,\n        pressure: 30.15,\n        visibility: 10,\n        uvIndex: 6,\n        conditions: 'Partly Cloudy',\n        precipitation: 0,\n        dewPoint: 58\n      },\n      hourly: Array.from({ length: 24 }, (_, i) => ({\n        datetime: new Date(now.getTime() + i * 60 * 60 * 1000),\n        temperature: 72 + (Math.random() - 0.5) * 10,\n        conditions: 'Partly Cloudy',\n        precipitation: 0,\n        windSpeed: 8 + (Math.random() - 0.5) * 4,\n        humidity: 65 + (Math.random() - 0.5) * 20,\n        icon: '//cdn.weatherapi.com/weather/64x64/day/116.png'\n      })),\n      daily: Array.from({ length: 3 }, (_, i) => ({\n        datetime: new Date(now.getTime() + i * 24 * 60 * 60 * 1000),\n        temperature: 72 + (Math.random() - 0.5) * 15,\n        conditions: 'Partly Cloudy',\n        precipitation: 0,\n        windSpeed: 10,\n        humidity: 65,\n        icon: '//cdn.weatherapi.com/weather/64x64/day/116.png'\n      })),\n      alerts: [],\n      location: {\n        name: 'Stuart',\n        region: 'Virginia',\n        country: 'United States',\n        lat: coords.lat,\n        lon: coords.lon\n      },\n      lastUpdated: now\n    }\n  }\n\n  async getWeatherAlerts(lat?: number, lon?: number): Promise<WeatherAlert[]> {\n    const weather = await this.getCurrentWeather(lat, lon)\n    return weather.alerts\n  }\n\n  async getHourlyForecast(lat?: number, lon?: number): Promise<WeatherForecast[]> {\n    const weather = await this.getCurrentWeather(lat, lon)\n    return weather.hourly\n  }\n\n  async isGoodForSealcoating(lat?: number, lon?: number): Promise<{\n    suitable: boolean\n    reasons: string[]\n    recommendations: string[]\n  }> {\n    const weather = await this.getCurrentWeather(lat, lon)\n    const current = weather.current\n    \n    const reasons: string[] = []\n    const recommendations: string[] = []\n    let suitable = true\n\n    // Temperature check\n    if (current.temperature < 50) {\n      suitable = false\n      reasons.push(`Temperature too low (${current.temperature}°F)`)\n      recommendations.push('Wait for temperatures above 50°F')\n    } else if (current.temperature > 95) {\n      reasons.push(`High temperature (${current.temperature}°F)`)\n      recommendations.push('Consider early morning or evening application')\n    } else {\n      reasons.push(`Temperature optimal (${current.temperature}°F)`)\n    }\n\n    // Precipitation check\n    if (current.precipitation > 0) {\n      suitable = false\n      reasons.push('Active precipitation detected')\n      recommendations.push('Wait for rain to stop and surface to dry')\n    } else {\n      reasons.push('No precipitation detected')\n    }\n\n    // Wind check\n    if (current.windSpeed > 15) {\n      reasons.push(`High wind speed (${current.windSpeed} mph)`)\n      recommendations.push('Use alternative application methods or wait for calmer conditions')\n    } else {\n      reasons.push(`Wind speed acceptable (${current.windSpeed} mph)`)\n    }\n\n    // Humidity check\n    if (current.humidity > 85) {\n      reasons.push(`High humidity (${current.humidity}%)`)\n      recommendations.push('Allow extra curing time due to high humidity')\n    } else {\n      reasons.push(`Humidity levels good (${current.humidity}%)`)\n    }\n\n    // Overall recommendations\n    if (suitable) {\n      recommendations.push('Conditions are suitable for sealcoating operations')\n      recommendations.push('Monitor weather conditions throughout the day')\n    }\n\n    return {\n      suitable,\n      reasons,\n      recommendations\n    }\n  }\n}\n\nexport const weatherService = new WeatherService()\nexport { WeatherService, type WeatherData, type WeatherAlert, type WeatherConditions, type WeatherForecast }","module.exports = require(\"axios\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst express_1 = require(\"express\");\nconst error_handler_1 = require(\"../middleware/error-handler\");\nconst plugin_manager_1 = require(\"../services/plugin-manager\");\nconst router = (0, express_1.Router)();\n// Get all loaded plugins\nrouter.get('/', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const plugins = plugin_manager_1.pluginManager.getLoadedPlugins();\n    res.json({\n        message: 'Loaded plugins retrieved successfully',\n        plugins: plugins.map(plugin => ({\n            name: plugin.metadata.name,\n            version: plugin.metadata.version,\n            description: plugin.metadata.description,\n            author: plugin.metadata.author,\n            type: plugin.metadata.type,\n            status: plugin.status,\n            loadedAt: plugin.loadedAt,\n            lastError: plugin.lastError\n        }))\n    });\n}));\n// Install plugin\nrouter.post('/install', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const { source, version, trusted } = req.body;\n    await plugin_manager_1.pluginManager.installPlugin(source, { version, trusted });\n    res.json({\n        message: 'Plugin installed successfully',\n        source,\n        version\n    });\n}));\n// Enable plugin\nrouter.post('/:name/enable', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    await plugin_manager_1.pluginManager.enablePlugin(req.params.name);\n    res.json({\n        message: `Plugin ${req.params.name} enabled successfully`\n    });\n}));\n// Disable plugin\nrouter.post('/:name/disable', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    await plugin_manager_1.pluginManager.disablePlugin(req.params.name);\n    res.json({\n        message: `Plugin ${req.params.name} disabled successfully`\n    });\n}));\n// Unload plugin\nrouter.delete('/:name', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    await plugin_manager_1.pluginManager.unloadPlugin(req.params.name);\n    res.json({\n        message: `Plugin ${req.params.name} unloaded successfully`\n    });\n}));\n// Get plugin details\nrouter.get('/:name', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const plugin = plugin_manager_1.pluginManager.getPlugin(req.params.name);\n    if (!plugin) {\n        return res.status(404).json({\n            error: 'Plugin not found',\n            name: req.params.name\n        });\n    }\n    res.json({\n        message: 'Plugin details retrieved successfully',\n        plugin: {\n            metadata: plugin.metadata,\n            status: plugin.status,\n            loadedAt: plugin.loadedAt,\n            lastError: plugin.lastError\n        }\n    });\n}));\nexports.default = router;\n","import { Router } from 'express';\nimport { asyncHandler } from '../middleware/error-handler';\nimport { pluginManager } from '../services/plugin-manager';\n\nconst router = Router();\n\n// Get all loaded plugins\nrouter.get('/', asyncHandler(async (req, res) => {\n  const plugins = pluginManager.getLoadedPlugins();\n  res.json({\n    message: 'Loaded plugins retrieved successfully',\n    plugins: plugins.map(plugin => ({\n      name: plugin.metadata.name,\n      version: plugin.metadata.version,\n      description: plugin.metadata.description,\n      author: plugin.metadata.author,\n      type: plugin.metadata.type,\n      status: plugin.status,\n      loadedAt: plugin.loadedAt,\n      lastError: plugin.lastError\n    }))\n  });\n}));\n\n// Install plugin\nrouter.post('/install', asyncHandler(async (req, res) => {\n  const { source, version, trusted } = req.body;\n  \n  await pluginManager.installPlugin(source, { version, trusted });\n  \n  res.json({\n    message: 'Plugin installed successfully',\n    source,\n    version\n  });\n}));\n\n// Enable plugin\nrouter.post('/:name/enable', asyncHandler(async (req, res) => {\n  await pluginManager.enablePlugin(req.params.name);\n  \n  res.json({\n    message: `Plugin ${req.params.name} enabled successfully`\n  });\n}));\n\n// Disable plugin\nrouter.post('/:name/disable', asyncHandler(async (req, res) => {\n  await pluginManager.disablePlugin(req.params.name);\n  \n  res.json({\n    message: `Plugin ${req.params.name} disabled successfully`\n  });\n}));\n\n// Unload plugin\nrouter.delete('/:name', asyncHandler(async (req, res) => {\n  await pluginManager.unloadPlugin(req.params.name);\n  \n  res.json({\n    message: `Plugin ${req.params.name} unloaded successfully`\n  });\n}));\n\n// Get plugin details\nrouter.get('/:name', asyncHandler(async (req, res) => {\n  const plugin = pluginManager.getPlugin(req.params.name);\n  \n  if (!plugin) {\n    return res.status(404).json({\n      error: 'Plugin not found',\n      name: req.params.name\n    });\n  }\n  \n  res.json({\n    message: 'Plugin details retrieved successfully',\n    plugin: {\n      metadata: plugin.metadata,\n      status: plugin.status,\n      loadedAt: plugin.loadedAt,\n      lastError: plugin.lastError\n    }\n  });\n}));\n\nexport default router;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst express_1 = require(\"express\");\nconst error_handler_1 = require(\"../middleware/error-handler\");\nconst database_1 = require(\"../config/database\");\nconst router = (0, express_1.Router)();\n// Get all business rules\nrouter.get('/rules', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        const { category, active } = req.query;\n        let query = `\n      SELECT \n        id, name, category, type, value, description, \n        is_active, last_modified, modified_by, dependencies, version\n      FROM business_rules\n      WHERE 1=1\n    `;\n        const params = [];\n        if (category && category !== 'all') {\n            query += ' AND category = $' + (params.length + 1);\n            params.push(category);\n        }\n        if (active !== undefined) {\n            query += ' AND is_active = $' + (params.length + 1);\n            params.push(active === 'true');\n        }\n        query += ' ORDER BY category, name';\n        const result = await client.query(query, params);\n        const rules = result.rows.map(row => ({\n            id: row.id,\n            name: row.name,\n            category: row.category,\n            type: row.type,\n            value: typeof row.value === 'string' ?\n                (row.value.startsWith('{') || row.value.startsWith('[') ?\n                    JSON.parse(row.value) : row.value) : row.value,\n            description: row.description,\n            isActive: row.is_active,\n            lastModified: row.last_modified,\n            modifiedBy: row.modified_by,\n            dependencies: row.dependencies ? JSON.parse(row.dependencies) : [],\n            version: row.version\n        }));\n        res.json({\n            success: true,\n            data: rules\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\n// Create new business rule\nrouter.post('/rules', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        const { name, category, type, value, description, isActive = true, dependencies = [], version = '1.0' } = req.body;\n        const valueJson = typeof value === 'object' ? JSON.stringify(value) : value.toString();\n        const dependenciesJson = JSON.stringify(dependencies);\n        const result = await client.query(`\n      INSERT INTO business_rules \n      (name, category, type, value, description, is_active, dependencies, version, created_at, last_modified, modified_by)\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW(), $9)\n      RETURNING id\n    `, [name, category, type, valueJson, description, isActive, dependenciesJson, version, 'API User']);\n        res.json({\n            success: true,\n            data: { id: result.rows[0].id }\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\n// Update business rule\nrouter.put('/rules/:id', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        const { id } = req.params;\n        const { name, category, type, value, description, isActive, dependencies, version } = req.body;\n        const valueJson = typeof value === 'object' ? JSON.stringify(value) : value.toString();\n        const dependenciesJson = JSON.stringify(dependencies || []);\n        await client.query(`\n      UPDATE business_rules \n      SET \n        name = $1, category = $2, type = $3, value = $4, \n        description = $5, is_active = $6, dependencies = $7, \n        version = $8, last_modified = NOW(), modified_by = $9\n      WHERE id = $10\n    `, [name, category, type, valueJson, description, isActive, dependenciesJson, version, 'API User', id]);\n        res.json({\n            success: true,\n            message: 'Business rule updated successfully'\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\n// Delete business rule\nrouter.delete('/rules/:id', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        const { id } = req.params;\n        await client.query('DELETE FROM business_rules WHERE id = $1', [id]);\n        res.json({\n            success: true,\n            message: 'Business rule deleted successfully'\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\n// Get all API configurations\nrouter.get('/apis', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        const result = await client.query(`\n      SELECT \n        id, name, type, endpoint, api_key, headers, parameters,\n        rate_limit, timeout, is_active, last_tested, test_status\n      FROM api_configurations\n      ORDER BY name\n    `);\n        const apis = result.rows.map(row => ({\n            id: row.id,\n            name: row.name,\n            type: row.type,\n            endpoint: row.endpoint,\n            apiKey: row.api_key,\n            headers: row.headers ? JSON.parse(row.headers) : {},\n            parameters: row.parameters ? JSON.parse(row.parameters) : {},\n            rateLimit: row.rate_limit,\n            timeout: row.timeout,\n            isActive: row.is_active,\n            lastTested: row.last_tested,\n            testStatus: row.test_status\n        }));\n        res.json({\n            success: true,\n            data: apis\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\n// Create new API configuration\nrouter.post('/apis', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        const { name, type, endpoint, apiKey, headers = {}, parameters = {}, rateLimit, timeout, isActive = true } = req.body;\n        const headersJson = JSON.stringify(headers);\n        const parametersJson = JSON.stringify(parameters);\n        const result = await client.query(`\n      INSERT INTO api_configurations \n      (name, type, endpoint, api_key, headers, parameters, rate_limit, timeout, is_active, created_at)\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW())\n      RETURNING id\n    `, [name, type, endpoint, apiKey, headersJson, parametersJson, rateLimit, timeout, isActive]);\n        res.json({\n            success: true,\n            data: { id: result.rows[0].id }\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\n// Update API configuration\nrouter.put('/apis/:id', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        const { id } = req.params;\n        const { name, type, endpoint, apiKey, headers, parameters, rateLimit, timeout, isActive } = req.body;\n        const headersJson = JSON.stringify(headers || {});\n        const parametersJson = JSON.stringify(parameters || {});\n        await client.query(`\n      UPDATE api_configurations \n      SET \n        name = $1, type = $2, endpoint = $3, api_key = $4,\n        headers = $5, parameters = $6, rate_limit = $7,\n        timeout = $8, is_active = $9, updated_at = NOW()\n      WHERE id = $10\n    `, [name, type, endpoint, apiKey, headersJson, parametersJson, rateLimit, timeout, isActive, id]);\n        res.json({\n            success: true,\n            message: 'API configuration updated successfully'\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\n// Test API configuration\nrouter.post('/apis/:id/test', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        const { id } = req.params;\n        // Get API configuration\n        const apiResult = await client.query('SELECT * FROM api_configurations WHERE id = $1', [id]);\n        if (apiResult.rows.length === 0) {\n            return res.status(404).json({\n                success: false,\n                error: 'API configuration not found'\n            });\n        }\n        const api = apiResult.rows[0];\n        // Update test status to pending\n        await client.query('UPDATE api_configurations SET test_status = $1 WHERE id = $2', ['pending', id]);\n        // Simulate API test (in real implementation, make actual HTTP request)\n        const testSuccess = Math.random() > 0.3; // 70% success rate simulation\n        // Update test results\n        await client.query('UPDATE api_configurations SET test_status = $1, last_tested = NOW() WHERE id = $2', [testSuccess ? 'success' : 'failed', id]);\n        res.json({\n            success: true,\n            data: {\n                testStatus: testSuccess ? 'success' : 'failed',\n                message: testSuccess ? 'API test successful' : 'API test failed - check configuration'\n            }\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\n// Delete API configuration\nrouter.delete('/apis/:id', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        const { id } = req.params;\n        await client.query('DELETE FROM api_configurations WHERE id = $1', [id]);\n        res.json({\n            success: true,\n            message: 'API configuration deleted successfully'\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\n// Export business logic (backup)\nrouter.get('/export', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        const [rulesResult, apisResult] = await Promise.all([\n            client.query('SELECT * FROM business_rules ORDER BY category, name'),\n            client.query('SELECT * FROM api_configurations ORDER BY name')\n        ]);\n        const exportData = {\n            businessRules: rulesResult.rows.map(row => ({\n                name: row.name,\n                category: row.category,\n                type: row.type,\n                value: typeof row.value === 'string' &&\n                    (row.value.startsWith('{') || row.value.startsWith('[')) ?\n                    JSON.parse(row.value) : row.value,\n                description: row.description,\n                isActive: row.is_active,\n                dependencies: row.dependencies ? JSON.parse(row.dependencies) : [],\n                version: row.version\n            })),\n            apiConfigurations: apisResult.rows.map(row => ({\n                name: row.name,\n                type: row.type,\n                endpoint: row.endpoint,\n                headers: row.headers ? JSON.parse(row.headers) : {},\n                parameters: row.parameters ? JSON.parse(row.parameters) : {},\n                rateLimit: row.rate_limit,\n                timeout: row.timeout,\n                isActive: row.is_active\n            })),\n            exportedAt: new Date().toISOString(),\n            version: '1.0'\n        };\n        res.json({\n            success: true,\n            data: exportData\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\n// Import business logic\nrouter.post('/import', (0, error_handler_1.asyncHandler)(async (req, res) => {\n    const client = await database_1.pool.connect();\n    try {\n        const { businessRules = [], apiConfigurations = [] } = req.body;\n        let importedRules = 0;\n        let importedApis = 0;\n        // Import business rules\n        for (const rule of businessRules) {\n            const valueJson = typeof rule.value === 'object' ?\n                JSON.stringify(rule.value) : rule.value.toString();\n            const dependenciesJson = JSON.stringify(rule.dependencies || []);\n            await client.query(`\n        INSERT INTO business_rules \n        (name, category, type, value, description, is_active, dependencies, version, created_at, last_modified, modified_by)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW(), $9)\n        ON CONFLICT (name) DO UPDATE SET\n          category = EXCLUDED.category,\n          type = EXCLUDED.type,\n          value = EXCLUDED.value,\n          description = EXCLUDED.description,\n          is_active = EXCLUDED.is_active,\n          dependencies = EXCLUDED.dependencies,\n          version = EXCLUDED.version,\n          last_modified = NOW(),\n          modified_by = EXCLUDED.modified_by\n      `, [\n                rule.name, rule.category, rule.type, valueJson, rule.description,\n                rule.isActive, dependenciesJson, rule.version || '1.0', 'Import'\n            ]);\n            importedRules++;\n        }\n        // Import API configurations\n        for (const api of apiConfigurations) {\n            const headersJson = JSON.stringify(api.headers || {});\n            const parametersJson = JSON.stringify(api.parameters || {});\n            await client.query(`\n        INSERT INTO api_configurations \n        (name, type, endpoint, api_key, headers, parameters, rate_limit, timeout, is_active, created_at)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW())\n        ON CONFLICT (name) DO UPDATE SET\n          type = EXCLUDED.type,\n          endpoint = EXCLUDED.endpoint,\n          headers = EXCLUDED.headers,\n          parameters = EXCLUDED.parameters,\n          rate_limit = EXCLUDED.rate_limit,\n          timeout = EXCLUDED.timeout,\n          is_active = EXCLUDED.is_active,\n          updated_at = NOW()\n      `, [\n                api.name, api.type, api.endpoint, api.apiKey || '',\n                headersJson, parametersJson, api.rateLimit, api.timeout, api.isActive\n            ]);\n            importedApis++;\n        }\n        res.json({\n            success: true,\n            data: {\n                importedRules,\n                importedApis,\n                message: `Successfully imported ${importedRules} rules and ${importedApis} API configurations`\n            }\n        });\n    }\n    finally {\n        client.release();\n    }\n}));\nexports.default = router;\n","import { Router } from 'express';\nimport { asyncHandler } from '../middleware/error-handler';\nimport { pool } from '../config/database';\n\nconst router = Router();\n\n// Get all business rules\nrouter.get('/rules', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    const { category, active } = req.query;\n    \n    let query = `\n      SELECT \n        id, name, category, type, value, description, \n        is_active, last_modified, modified_by, dependencies, version\n      FROM business_rules\n      WHERE 1=1\n    `;\n    \n    const params: any[] = [];\n    \n    if (category && category !== 'all') {\n      query += ' AND category = $' + (params.length + 1);\n      params.push(category);\n    }\n    \n    if (active !== undefined) {\n      query += ' AND is_active = $' + (params.length + 1);\n      params.push(active === 'true');\n    }\n    \n    query += ' ORDER BY category, name';\n    \n    const result = await client.query(query, params);\n    \n    const rules = result.rows.map(row => ({\n      id: row.id,\n      name: row.name,\n      category: row.category,\n      type: row.type,\n      value: typeof row.value === 'string' ? \n        (row.value.startsWith('{') || row.value.startsWith('[') ? \n          JSON.parse(row.value) : row.value) : row.value,\n      description: row.description,\n      isActive: row.is_active,\n      lastModified: row.last_modified,\n      modifiedBy: row.modified_by,\n      dependencies: row.dependencies ? JSON.parse(row.dependencies) : [],\n      version: row.version\n    }));\n    \n    res.json({\n      success: true,\n      data: rules\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\n// Create new business rule\nrouter.post('/rules', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    const {\n      name, category, type, value, description,\n      isActive = true, dependencies = [], version = '1.0'\n    } = req.body;\n    \n    const valueJson = typeof value === 'object' ? JSON.stringify(value) : value.toString();\n    const dependenciesJson = JSON.stringify(dependencies);\n    \n    const result = await client.query(`\n      INSERT INTO business_rules \n      (name, category, type, value, description, is_active, dependencies, version, created_at, last_modified, modified_by)\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW(), $9)\n      RETURNING id\n    `, [name, category, type, valueJson, description, isActive, dependenciesJson, version, 'API User']);\n    \n    res.json({\n      success: true,\n      data: { id: result.rows[0].id }\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\n// Update business rule\nrouter.put('/rules/:id', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    const { id } = req.params;\n    const {\n      name, category, type, value, description,\n      isActive, dependencies, version\n    } = req.body;\n    \n    const valueJson = typeof value === 'object' ? JSON.stringify(value) : value.toString();\n    const dependenciesJson = JSON.stringify(dependencies || []);\n    \n    await client.query(`\n      UPDATE business_rules \n      SET \n        name = $1, category = $2, type = $3, value = $4, \n        description = $5, is_active = $6, dependencies = $7, \n        version = $8, last_modified = NOW(), modified_by = $9\n      WHERE id = $10\n    `, [name, category, type, valueJson, description, isActive, dependenciesJson, version, 'API User', id]);\n    \n    res.json({\n      success: true,\n      message: 'Business rule updated successfully'\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\n// Delete business rule\nrouter.delete('/rules/:id', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    const { id } = req.params;\n    \n    await client.query('DELETE FROM business_rules WHERE id = $1', [id]);\n    \n    res.json({\n      success: true,\n      message: 'Business rule deleted successfully'\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\n// Get all API configurations\nrouter.get('/apis', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    const result = await client.query(`\n      SELECT \n        id, name, type, endpoint, api_key, headers, parameters,\n        rate_limit, timeout, is_active, last_tested, test_status\n      FROM api_configurations\n      ORDER BY name\n    `);\n    \n    const apis = result.rows.map(row => ({\n      id: row.id,\n      name: row.name,\n      type: row.type,\n      endpoint: row.endpoint,\n      apiKey: row.api_key,\n      headers: row.headers ? JSON.parse(row.headers) : {},\n      parameters: row.parameters ? JSON.parse(row.parameters) : {},\n      rateLimit: row.rate_limit,\n      timeout: row.timeout,\n      isActive: row.is_active,\n      lastTested: row.last_tested,\n      testStatus: row.test_status\n    }));\n    \n    res.json({\n      success: true,\n      data: apis\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\n// Create new API configuration\nrouter.post('/apis', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    const {\n      name, type, endpoint, apiKey, headers = {},\n      parameters = {}, rateLimit, timeout, isActive = true\n    } = req.body;\n    \n    const headersJson = JSON.stringify(headers);\n    const parametersJson = JSON.stringify(parameters);\n    \n    const result = await client.query(`\n      INSERT INTO api_configurations \n      (name, type, endpoint, api_key, headers, parameters, rate_limit, timeout, is_active, created_at)\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW())\n      RETURNING id\n    `, [name, type, endpoint, apiKey, headersJson, parametersJson, rateLimit, timeout, isActive]);\n    \n    res.json({\n      success: true,\n      data: { id: result.rows[0].id }\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\n// Update API configuration\nrouter.put('/apis/:id', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    const { id } = req.params;\n    const {\n      name, type, endpoint, apiKey, headers,\n      parameters, rateLimit, timeout, isActive\n    } = req.body;\n    \n    const headersJson = JSON.stringify(headers || {});\n    const parametersJson = JSON.stringify(parameters || {});\n    \n    await client.query(`\n      UPDATE api_configurations \n      SET \n        name = $1, type = $2, endpoint = $3, api_key = $4,\n        headers = $5, parameters = $6, rate_limit = $7,\n        timeout = $8, is_active = $9, updated_at = NOW()\n      WHERE id = $10\n    `, [name, type, endpoint, apiKey, headersJson, parametersJson, rateLimit, timeout, isActive, id]);\n    \n    res.json({\n      success: true,\n      message: 'API configuration updated successfully'\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\n// Test API configuration\nrouter.post('/apis/:id/test', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    const { id } = req.params;\n    \n    // Get API configuration\n    const apiResult = await client.query(\n      'SELECT * FROM api_configurations WHERE id = $1',\n      [id]\n    );\n    \n    if (apiResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'API configuration not found'\n      });\n    }\n    \n    const api = apiResult.rows[0];\n    \n    // Update test status to pending\n    await client.query(\n      'UPDATE api_configurations SET test_status = $1 WHERE id = $2',\n      ['pending', id]\n    );\n    \n    // Simulate API test (in real implementation, make actual HTTP request)\n    const testSuccess = Math.random() > 0.3; // 70% success rate simulation\n    \n    // Update test results\n    await client.query(\n      'UPDATE api_configurations SET test_status = $1, last_tested = NOW() WHERE id = $2',\n      [testSuccess ? 'success' : 'failed', id]\n    );\n    \n    res.json({\n      success: true,\n      data: {\n        testStatus: testSuccess ? 'success' : 'failed',\n        message: testSuccess ? 'API test successful' : 'API test failed - check configuration'\n      }\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\n// Delete API configuration\nrouter.delete('/apis/:id', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    const { id } = req.params;\n    \n    await client.query('DELETE FROM api_configurations WHERE id = $1', [id]);\n    \n    res.json({\n      success: true,\n      message: 'API configuration deleted successfully'\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\n// Export business logic (backup)\nrouter.get('/export', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    const [rulesResult, apisResult] = await Promise.all([\n      client.query('SELECT * FROM business_rules ORDER BY category, name'),\n      client.query('SELECT * FROM api_configurations ORDER BY name')\n    ]);\n    \n    const exportData = {\n      businessRules: rulesResult.rows.map(row => ({\n        name: row.name,\n        category: row.category,\n        type: row.type,\n        value: typeof row.value === 'string' && \n               (row.value.startsWith('{') || row.value.startsWith('[')) ?\n               JSON.parse(row.value) : row.value,\n        description: row.description,\n        isActive: row.is_active,\n        dependencies: row.dependencies ? JSON.parse(row.dependencies) : [],\n        version: row.version\n      })),\n      apiConfigurations: apisResult.rows.map(row => ({\n        name: row.name,\n        type: row.type,\n        endpoint: row.endpoint,\n        headers: row.headers ? JSON.parse(row.headers) : {},\n        parameters: row.parameters ? JSON.parse(row.parameters) : {},\n        rateLimit: row.rate_limit,\n        timeout: row.timeout,\n        isActive: row.is_active\n      })),\n      exportedAt: new Date().toISOString(),\n      version: '1.0'\n    };\n    \n    res.json({\n      success: true,\n      data: exportData\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\n// Import business logic\nrouter.post('/import', asyncHandler(async (req, res) => {\n  const client = await pool.connect();\n  \n  try {\n    const { businessRules = [], apiConfigurations = [] } = req.body;\n    \n    let importedRules = 0;\n    let importedApis = 0;\n    \n    // Import business rules\n    for (const rule of businessRules) {\n      const valueJson = typeof rule.value === 'object' ? \n        JSON.stringify(rule.value) : rule.value.toString();\n      const dependenciesJson = JSON.stringify(rule.dependencies || []);\n      \n      await client.query(`\n        INSERT INTO business_rules \n        (name, category, type, value, description, is_active, dependencies, version, created_at, last_modified, modified_by)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW(), $9)\n        ON CONFLICT (name) DO UPDATE SET\n          category = EXCLUDED.category,\n          type = EXCLUDED.type,\n          value = EXCLUDED.value,\n          description = EXCLUDED.description,\n          is_active = EXCLUDED.is_active,\n          dependencies = EXCLUDED.dependencies,\n          version = EXCLUDED.version,\n          last_modified = NOW(),\n          modified_by = EXCLUDED.modified_by\n      `, [\n        rule.name, rule.category, rule.type, valueJson, rule.description,\n        rule.isActive, dependenciesJson, rule.version || '1.0', 'Import'\n      ]);\n      \n      importedRules++;\n    }\n    \n    // Import API configurations\n    for (const api of apiConfigurations) {\n      const headersJson = JSON.stringify(api.headers || {});\n      const parametersJson = JSON.stringify(api.parameters || {});\n      \n      await client.query(`\n        INSERT INTO api_configurations \n        (name, type, endpoint, api_key, headers, parameters, rate_limit, timeout, is_active, created_at)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW())\n        ON CONFLICT (name) DO UPDATE SET\n          type = EXCLUDED.type,\n          endpoint = EXCLUDED.endpoint,\n          headers = EXCLUDED.headers,\n          parameters = EXCLUDED.parameters,\n          rate_limit = EXCLUDED.rate_limit,\n          timeout = EXCLUDED.timeout,\n          is_active = EXCLUDED.is_active,\n          updated_at = NOW()\n      `, [\n        api.name, api.type, api.endpoint, api.apiKey || '',\n        headersJson, parametersJson, api.rateLimit, api.timeout, api.isActive\n      ]);\n      \n      importedApis++;\n    }\n    \n    res.json({\n      success: true,\n      data: {\n        importedRules,\n        importedApis,\n        message: `Successfully imported ${importedRules} rules and ${importedApis} API configurations`\n      }\n    });\n    \n  } finally {\n    client.release();\n  }\n}));\n\nexport default router;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the module cache\n__webpack_require__.c = __webpack_module_cache__;\n\n","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","","// module cache are used so entry inlining is disabled\n// startup\n// Load entry module and return exports\nvar __webpack_exports__ = __webpack_require__(__webpack_require__.s = 0);\n",""],"names":[],"sourceRoot":""}