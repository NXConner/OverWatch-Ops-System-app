{
  "businessRules": [
    {
      "name": "SealMaster PMM Unit Cost",
      "category": "pricing",
      "type": "constant",
      "value": 3.79,
      "description": "Cost per gallon of SealMaster PMM concentrate",
      "isActive": true,
      "dependencies": [],
      "version": "1.0"
    },
    {
      "name": "Sand 50lb Cost",
      "category": "pricing", 
      "type": "constant",
      "value": 10.00,
      "description": "Cost per 50lb bag of sand additive",
      "isActive": true,
      "dependencies": [],
      "version": "1.0"
    },
    {
      "name": "CrackMaster Cost",
      "category": "pricing",
      "type": "constant", 
      "value": 44.95,
      "description": "Cost per gallon of CrackMaster crack filler",
      "isActive": true,
      "dependencies": [],
      "version": "1.0"
    },
    {
      "name": "Coverage Calculation",
      "category": "calculations",
      "type": "formula",
      "value": "area_sqft / 80",
      "description": "Calculates gallons needed based on area (80 sq ft coverage per gallon)",
      "isActive": true,
      "dependencies": ["area_sqft"],
      "version": "1.2"
    },
    {
      "name": "Sand Requirement Formula", 
      "category": "calculations",
      "type": "formula",
      "value": "sealer_gallons / 6",
      "description": "Calculates sand bags needed (1 bag per 6 gallons of sealer)",
      "isActive": true,
      "dependencies": ["sealer_gallons"],
      "version": "1.0"
    },
    {
      "name": "Labor Rate Range",
      "category": "pricing",
      "type": "conditional",
      "value": "task_type === 'prep' ? 45 : task_type === 'crack_fill' ? 50 : task_type === 'sealcoat' ? 55 : 40",
      "description": "Determines hourly labor rate based on task type",
      "isActive": true,
      "dependencies": ["task_type"],
      "version": "1.1"
    },
    {
      "name": "Weather Suitability Rules",
      "category": "operations",
      "type": "conditional", 
      "value": "temperature >= 50 && temperature <= 95 && humidity < 85 && windSpeed < 15 && precipitation === 0",
      "description": "Determines if weather conditions are suitable for sealcoating",
      "isActive": true,
      "dependencies": ["temperature", "humidity", "windSpeed", "precipitation"],
      "version": "2.0"
    },
    {
      "name": "Overhead Percentage",
      "category": "pricing",
      "type": "constant",
      "value": 0.15,
      "description": "Standard overhead markup (15%)",
      "isActive": true,
      "dependencies": [],
      "version": "1.0"
    },
    {
      "name": "Profit Margin",
      "category": "pricing",
      "type": "constant",
      "value": 0.20,
      "description": "Standard profit margin (20%)",
      "isActive": true,
      "dependencies": [],
      "version": "1.0"
    },
    {
      "name": "Project Size Multiplier",
      "category": "pricing",
      "type": "conditional",
      "value": "area_sqft > 10000 ? 0.95 : area_sqft > 5000 ? 0.98 : 1.0",
      "description": "Volume discount for larger projects",
      "isActive": true,
      "dependencies": ["area_sqft"],
      "version": "1.0"
    },
    {
      "name": "Equipment Utilization Rate",
      "category": "operations",
      "type": "constant",
      "value": 0.85,
      "description": "Standard equipment utilization rate (85%)",
      "isActive": true,
      "dependencies": [],
      "version": "1.0"
    },
    {
      "name": "Travel Time Factor",
      "category": "operations",
      "type": "formula",
      "value": "distance_miles * 0.5 + 30",
      "description": "Calculates setup time including travel (0.5 hrs per mile + 30 min base)",
      "isActive": true,
      "dependencies": ["distance_miles"],
      "version": "1.0"
    },
    {
      "name": "Quality Control Time",
      "category": "operations",
      "type": "formula",
      "value": "area_sqft / 1000 * 15",
      "description": "Quality control inspection time (15 min per 1000 sq ft)",
      "isActive": true,
      "dependencies": ["area_sqft"],
      "version": "1.0"
    },
    {
      "name": "Material Waste Factor",
      "category": "calculations",
      "type": "constant",
      "value": 0.05,
      "description": "Material waste allowance (5%)",
      "isActive": true,
      "dependencies": [],
      "version": "1.0"
    },
    {
      "name": "Minimum Job Charge",
      "category": "pricing",
      "type": "constant",
      "value": 150.00,
      "description": "Minimum charge for any sealcoating job",
      "isActive": true,
      "dependencies": [],
      "version": "1.0"
    },
    {
      "name": "Surface Condition Multiplier",
      "category": "pricing",
      "type": "conditional",
      "value": "condition === 'poor' ? 1.5 : condition === 'fair' ? 1.2 : 1.0",
      "description": "Labor multiplier based on surface condition",
      "isActive": true,
      "dependencies": ["condition"],
      "version": "1.0"
    },
    {
      "name": "Access Complexity Factor",
      "category": "operations",
      "type": "conditional",
      "value": "access === 'very_difficult' ? 2.0 : access === 'difficult' ? 1.5 : access === 'moderate' ? 1.2 : 1.0",
      "description": "Time multiplier based on job site access difficulty",
      "isActive": true,
      "dependencies": ["access"],
      "version": "1.0"
    },
    {
      "name": "Seasonal Pricing Adjustment",
      "category": "pricing",
      "type": "conditional",
      "value": "month >= 11 || month <= 2 ? 1.1 : month >= 6 && month <= 8 ? 0.95 : 1.0",
      "description": "Seasonal pricing adjustments (winter +10%, summer -5%)",
      "isActive": true,
      "dependencies": ["month"],
      "version": "1.0"
    },
    {
      "name": "Rush Job Surcharge",
      "category": "pricing",
      "type": "conditional",
      "value": "rush_job ? 1.25 : 1.0",
      "description": "25% surcharge for rush jobs (< 48hr notice)",
      "isActive": true,
      "dependencies": ["rush_job"],
      "version": "1.0"
    },
    {
      "name": "Crew Size Calculation",
      "category": "operations",
      "type": "formula",
      "value": "Math.max(2, Math.min(6, Math.ceil(area_sqft / 2000)))",
      "description": "Optimal crew size based on project area (2-6 people, 2000 sqft per person)",
      "isActive": true,
      "dependencies": ["area_sqft"],
      "version": "1.0"
    }
  ],
  "apiConfigurations": [
    {
      "name": "WeatherAPI",
      "type": "weather",
      "endpoint": "https://api.weatherapi.com/v1",
      "headers": {
        "Content-Type": "application/json"
      },
      "parameters": {
        "units": "imperial",
        "aqi": "no"
      },
      "rateLimit": 1000000,
      "timeout": 5000,
      "isActive": true
    },
    {
      "name": "Google Gemini AI",
      "type": "ai",
      "endpoint": "https://generativelanguage.googleapis.com/v1beta",
      "headers": {
        "Content-Type": "application/json"
      },
      "parameters": {
        "model": "gemini-1.5-pro",
        "temperature": 0.3,
        "maxTokens": 4000
      },
      "rateLimit": 60,
      "timeout": 30000,
      "isActive": false
    },
    {
      "name": "Google Maps API",
      "type": "mapping",
      "endpoint": "https://maps.googleapis.com/maps/api",
      "headers": {
        "Content-Type": "application/json"
      },
      "parameters": {
        "region": "us"
      },
      "rateLimit": 25000,
      "timeout": 10000,
      "isActive": false
    },
    {
      "name": "Stripe Payment Processing",
      "type": "payment",
      "endpoint": "https://api.stripe.com/v1",
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      },
      "parameters": {
        "currency": "usd",
        "payment_method_types": ["card"]
      },
      "rateLimit": 100,
      "timeout": 15000,
      "isActive": false
    },
    {
      "name": "Twilio SMS Notifications",
      "type": "notification",
      "endpoint": "https://api.twilio.com/2010-04-01",
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      },
      "parameters": {},
      "rateLimit": 1000,
      "timeout": 10000,
      "isActive": false
    },
    {
      "name": "QuickBooks Integration",
      "type": "external",
      "endpoint": "https://sandbox-quickbooks.api.intuit.com/v3",
      "headers": {
        "Accept": "application/json"
      },
      "parameters": {},
      "rateLimit": 500,
      "timeout": 15000,
      "isActive": false
    },
    {
      "name": "Mailgun Email Service",
      "type": "notification",
      "endpoint": "https://api.mailgun.net/v3",
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      },
      "parameters": {},
      "rateLimit": 10000,
      "timeout": 10000,
      "isActive": false
    },
    {
      "name": "AWS S3 File Storage",
      "type": "external",
      "endpoint": "https://s3.amazonaws.com",
      "headers": {
        "Content-Type": "application/json"
      },
      "parameters": {
        "region": "us-east-1"
      },
      "rateLimit": 100000,
      "timeout": 30000,
      "isActive": false
    }
  ],
  "templates": {
    "materialCostCalculation": {
      "name": "Material Cost Calculation",
      "category": "pricing",
      "language": "javascript",
      "code": "const calculateMaterialCost = (area_sqft, surface_type, condition) => {\n  const base_coverage = 80; // sq ft per gallon\n  const coverage_adjustment = condition === 'poor' ? 0.8 : condition === 'fair' ? 0.9 : 1.0;\n  const actual_coverage = base_coverage * coverage_adjustment;\n  \n  const sealer_gallons = area_sqft / actual_coverage;\n  const sealer_cost = sealer_gallons * 3.79; // PMM cost per gallon\n  \n  const sand_bags = Math.ceil(sealer_gallons / 6); // 1 bag per 6 gallons\n  const sand_cost = sand_bags * 10.00;\n  \n  const waste_factor = 1.05; // 5% waste\n  const total_material_cost = (sealer_cost + sand_cost) * waste_factor;\n  \n  return {\n    sealer_gallons: Math.round(sealer_gallons * 100) / 100,\n    sealer_cost: Math.round(sealer_cost * 100) / 100,\n    sand_bags,\n    sand_cost,\n    waste_allowance: Math.round((total_material_cost - sealer_cost - sand_cost) * 100) / 100,\n    total_material_cost: Math.round(total_material_cost * 100) / 100\n  };\n};",
      "description": "Comprehensive material cost calculation with waste factor and condition adjustments"
    },
    "laborTimeEstimation": {
      "name": "Labor Time Estimation",
      "category": "operations",
      "language": "javascript", 
      "code": "const estimateLaborTime = (area_sqft, surface_type, condition, access_complexity) => {\n  const base_rate = 800; // sq ft per hour base rate\n  \n  // Condition multipliers\n  const condition_multiplier = {\n    'excellent': 1.0,\n    'good': 1.1,\n    'fair': 1.3,\n    'poor': 1.6\n  };\n  \n  // Access multipliers\n  const access_multiplier = {\n    'easy': 1.0,\n    'moderate': 1.2,\n    'difficult': 1.5,\n    'very_difficult': 2.0\n  };\n  \n  const adjusted_rate = base_rate * \n    (condition_multiplier[condition] || 1.1) * \n    (access_multiplier[access_complexity] || 1.2);\n  \n  const prep_hours = area_sqft / (adjusted_rate * 1.5); // Prep is slower\n  const seal_hours = area_sqft / adjusted_rate;\n  const cleanup_hours = Math.max(1, area_sqft / 2000); // Minimum 1 hour\n  \n  const total_hours = prep_hours + seal_hours + cleanup_hours;\n  const crew_size = Math.max(2, Math.min(6, Math.ceil(area_sqft / 2000)));\n  \n  return {\n    prep_hours: Math.round(prep_hours * 100) / 100,\n    seal_hours: Math.round(seal_hours * 100) / 100,\n    cleanup_hours: Math.round(cleanup_hours * 100) / 100,\n    total_hours: Math.round(total_hours * 100) / 100,\n    crew_size,\n    total_labor_cost: Math.round(total_hours * crew_size * 50 * 100) / 100 // $50/hour average\n  };\n};",
      "description": "Advanced labor estimation with crew sizing and condition factors"
    },
    "weatherValidation": {
      "name": "Weather Validation",
      "category": "validation",
      "language": "javascript",
      "code": "const validateWeatherConditions = (weather) => {\n  const {temperature, humidity, windSpeed, precipitation, forecast} = weather;\n  \n  const validations = {\n    temperature: {\n      valid: temperature >= 50 && temperature <= 95,\n      message: temperature < 50 ? 'Temperature too low (<50°F)' : \n               temperature > 95 ? 'Temperature too high (>95°F)' : 'Temperature optimal',\n      score: temperature >= 50 && temperature <= 95 ? 100 : \n             temperature >= 45 && temperature <= 100 ? 50 : 0\n    },\n    humidity: {\n      valid: humidity < 85,\n      message: humidity >= 85 ? 'Humidity too high (≥85%)' : 'Humidity acceptable',\n      score: humidity < 70 ? 100 : humidity < 85 ? 75 : 0\n    },\n    wind: {\n      valid: windSpeed < 15,\n      message: windSpeed >= 15 ? 'Wind speed too high (≥15mph)' : 'Wind conditions good',\n      score: windSpeed < 10 ? 100 : windSpeed < 15 ? 75 : 0\n    },\n    precipitation: {\n      valid: precipitation === 0,\n      message: precipitation > 0 ? 'Active precipitation detected' : 'No precipitation',\n      score: precipitation === 0 ? 100 : 0\n    }\n  };\n  \n  const overall_score = Object.values(validations).reduce((sum, v) => sum + v.score, 0) / 4;\n  const overall_suitable = Object.values(validations).every(v => v.valid);\n  \n  return {\n    suitable: overall_suitable,\n    score: Math.round(overall_score),\n    validations,\n    recommendation: overall_score >= 90 ? 'Excellent conditions for sealcoating' :\n                   overall_score >= 75 ? 'Good conditions, proceed with caution' :\n                   overall_score >= 50 ? 'Marginal conditions, consider delaying' :\n                   'Poor conditions, wait for improvement'\n  };\n};",
      "description": "Advanced weather validation with scoring system and detailed recommendations"
    },
    "projectEstimator": {
      "name": "Complete Project Estimator",
      "category": "calculations",
      "language": "javascript",
      "code": "const generateProjectEstimate = (projectData) => {\n  const {\n    area_sqft, surface_type, condition, access_complexity,\n    distance_miles, rush_job, season_month\n  } = projectData;\n  \n  // Material calculation\n  const materials = calculateMaterialCost(area_sqft, surface_type, condition);\n  \n  // Labor calculation\n  const labor = estimateLaborTime(area_sqft, surface_type, condition, access_complexity);\n  \n  // Additional costs\n  const travel_cost = (distance_miles * 0.5 + 30) * 50; // Travel time at $50/hr\n  const equipment_cost = area_sqft * 0.05; // $0.05 per sq ft equipment\n  \n  // Base totals\n  const subtotal = materials.total_material_cost + labor.total_labor_cost + travel_cost + equipment_cost;\n  \n  // Apply multipliers\n  const seasonal_multiplier = season_month >= 11 || season_month <= 2 ? 1.1 : \n                             season_month >= 6 && season_month <= 8 ? 0.95 : 1.0;\n  const rush_multiplier = rush_job ? 1.25 : 1.0;\n  const size_multiplier = area_sqft > 10000 ? 0.95 : area_sqft > 5000 ? 0.98 : 1.0;\n  \n  const adjusted_subtotal = subtotal * seasonal_multiplier * rush_multiplier * size_multiplier;\n  \n  // Overhead and profit\n  const overhead = adjusted_subtotal * 0.15;\n  const profit = (adjusted_subtotal + overhead) * 0.20;\n  const total = adjusted_subtotal + overhead + profit;\n  \n  // Minimum job charge\n  const final_total = Math.max(total, 150.00);\n  \n  return {\n    area_sqft,\n    materials,\n    labor,\n    costs: {\n      travel: Math.round(travel_cost * 100) / 100,\n      equipment: Math.round(equipment_cost * 100) / 100,\n      subtotal: Math.round(subtotal * 100) / 100,\n      seasonal_adjustment: Math.round((adjusted_subtotal - subtotal) * 100) / 100,\n      overhead: Math.round(overhead * 100) / 100,\n      profit: Math.round(profit * 100) / 100,\n      total: Math.round(final_total * 100) / 100\n    },\n    multipliers: {\n      seasonal: seasonal_multiplier,\n      rush: rush_multiplier,\n      size: size_multiplier\n    },\n    timeline: {\n      estimated_days: Math.ceil(labor.total_hours / (8 * labor.crew_size)),\n      crew_size: labor.crew_size\n    }\n  };\n};",
      "description": "Complete project estimation engine with all cost factors and business rules"
    }
  },
  "constants": {
    "business": {
      "name": "Blacktop Solutions LLC",
      "address": "337 Ayers Orchard Road, Stuart, VA 24171",
      "phone": "(276) 555-0123",
      "email": "info@blacktopsolutions.com",
      "license": "VA-CONTRACTOR-123456",
      "coordinates": {
        "lat": 36.5962,
        "lng": -80.2741
      }
    },
    "materialPricing": {
      "sealmaster_pmm": 3.79,
      "sand_50lb": 10.00,
      "crackmaster": 44.95,
      "fast_dry": 50.00,
      "prep_seal": 50.00,
      "propane_tank": 10.00
    },
    "laborRates": {
      "prep_work": 45.00,
      "crack_filling": 50.00,
      "sealcoating": 55.00,
      "cleanup": 40.00,
      "travel_time": 50.00
    },
    "operationalParams": {
      "coverage_per_gallon": 80,
      "sand_bags_per_6_gallons": 1,
      "waste_factor": 0.05,
      "overhead_percentage": 0.15,
      "profit_margin": 0.20,
      "minimum_job_charge": 150.00,
      "equipment_utilization": 0.85
    }
  },
  "validation": {
    "weather": {
      "temperature_min": 50,
      "temperature_max": 95,
      "humidity_max": 85,
      "wind_speed_max": 15,
      "precipitation_max": 0
    },
    "project": {
      "area_min": 100,
      "area_max": 50000,
      "crew_size_min": 2,
      "crew_size_max": 6
    }
  },
  "exportedAt": "2024-01-15T12:00:00.000Z",
  "version": "1.0",
  "description": "Complete Blacktop Blackout business logic template including all pricing rules, operational formulas, API configurations, and validation parameters."
}